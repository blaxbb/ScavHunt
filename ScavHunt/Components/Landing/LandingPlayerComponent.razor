@using ScavHunt.Data.Models
@using System.Text.RegularExpressions
@inject NavigationManager nav
@inject QuestionService questions;

<div class="container">
    <div class="card row mb-3" id="hintCard">
        <div class="card-header">
            <h3 class="text-center my-1">Activate a Question</h3>
        </div>
        <div class="card-body">
            <form class="row g-3" @onsubmit="async () => await SubmitQuestionCode(ManualQuestionCode)">
                <div class="col-auto">
                    <button type="button" class="btn btn-lg btn-primary"><span class="oi oi-camera-slr"></span></button>
                </div>
                <div class="col">
                    <input type="text" class="form-control form-control-lg" placeholder="Enter question code" @bind-value="@ManualQuestionCode"/>
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-lg btn-primary"><span class="oi oi-media-play"></span></button>
                </div>
                <input type="submit" hidden />
            </form>
        </div>
    </div>
    <div class="card row mb-3" id="hintCard">
        <div class="card-header">
            <h3 class="text-center my-1">Active Now</h3>
        </div>
        <div class="card-body">
            @if (ActiveQuestions != default)
            {
                @for (int i = 0; i < ActiveQuestions.Count; i++)
                {
                    var question = ActiveQuestions[i];
                    var complete = player?.PointTransactions.Any(p => p.Question?.Id == question.Id) ?? false;

                    <button type="button" class="alert @(complete ? "alert-success" : "alert-primary") w-100" data-bs-toggle="collapse" data-bs-target="#collapseExample-@i" aria-expanded="false" aria-controls="collapseExample-@i" role="alert">
                        <div>@question.Title <span class="ms-3 oi oi-plus"></span></div>
                        <div class="collapse mt-3" id="collapseExample-@i">
                            <div class="card card-body bg-transparent">
                                @question.HintText
                            </div>
                        </div>
                    </button>
                }
            }
        </div>
    </div>
    <div class="card row mb-3" id="leaderboardCard">
        <div class="card-header">
            <h3 class="text-center my-1">You are in 25th place</h3>
        </div>
        <div class="card-body">
            <table class="table table-striped table-hover">
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>LEADER NAME</td>
                        <td>85</td>
                    </tr>
                    <tr>
                        <td class="text-center" colspan="3">...</td>
                    </tr>
                    <tr>
                        <td>23</td>
                        <td>Other Name</td>
                        <td>42</td>
                    </tr>
                    <tr>
                        <td>24</td>
                        <td>Other Name</td>
                        <td>40</td>
                    </tr>
                    <tr>
                        <td>25</td>
                        <td>@player.BadgeNumber</td>
                        <td>39</td>
                    </tr>
                    <tr>
                        <td>26</td>
                        <td>Other Name</td>
                        <td>35</td>
                    </tr>
                    <tr>
                        <td>27</td>
                        <td>Other Name</td>
                        <td>35</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Player? player { get; set; }

    List<Question>? ActiveQuestions { get; set; }

    string ManualQuestionCode { get; set; }

    public List<string> Hints { get; set; } = new() { "Hint 1", "Hint 2", "Hint 3", "Hint 4", "Hint 5" };

    protected override async Task OnInitializedAsync()
    {
        ActiveQuestions = await questions.Active();
    }

    async Task SubmitQuestionCode(string code)
    {
        //^\d{N}$ - Checks for N digit string ex: "1234...N"
        if(Regex.IsMatch(code, $"^\\d{{{Question.SHORT_CODE_LENGTH}}}$"))
        {
            var question = await questions.GetFromShortCode(code);
            if(question != default)
            {
                nav.NavigateTo($"/q/{code}");
            }
            else
            {
                
            }
        }
    }
}