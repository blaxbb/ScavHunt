@using ScavHunt.Data.Models
@using System.Text.RegularExpressions
@inject NavigationManager nav;
@inject QuestionService questions;
@inject MarkdownService md;
@inject JSInterop js;
@inject LeaderboardService leaders;
@inject LogService log;
@inject PlayerService players;

<ScannerModal @ref="@scannerModal" Id="scannerModal" Title="Scan QR Code" CloseText="Cancel" Success="QrSuccess" />

<div class="container">
    <div class=" position-relative overflow-hidden">
        <div class="position-absolute line-bg">

        </div>
    <div class="row spacer bg-primary p-3">
        <div class="header col-xl-3 mb-3">
            <h1>Start a question</h1>
            <div>
                Find and scan the QR codes hidden around the conference.  Answer the questions quickly to collect the most points!
            </div>
        </div>
        <form class="col-xl-9 my-auto row p-0 m-0" @onsubmit="async () => await SubmitQuestionCode(ManualQuestionCode)">
            <div class="col-auto">
                <button type="button" class="btn btn-lg btn-interactable" @onclick="@(async () => await scannerModal.Show())"><span class="oi oi-camera-slr"></span></button>
            </div>
            <div class="col">
                <input type="text" class="form-control form-control-lg" placeholder="Enter question code" @bind-value="@ManualQuestionCode" />
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-lg btn-interactable"><span class="oi oi-media-play"></span></button>
            </div>
            <input type="submit" hidden />
        </form>
    </div>
    <div class="row spacer bg-secondary p-3">
        <div class="header col-xl-3 mb-3">
            <h1>Current Hints</h1>
            <div class="mb-3">
                Here are some hints for the currently active questions.
            </div>
            @if (CompletedQuestions != null && CompletedQuestions.Count > 0)
            {
                <div class="mb-3">
                    You have completed @CompletedQuestions.Count question today.
                </div>
            }
        </div>
        <div class="col-xl-9 my-auto">
            @if (ActiveQuestions != default)
            {
                @for (int i = 0; i < ActiveQuestions.Count; i++)
                {
                    var question = ActiveQuestions[i];
                    var complete = player?.PointTransactions.Any(p => p.Question?.Id == question.Id) ?? false;

                    <div class="list-item p-3 w-100 spacer cursor-pointer" data-bs-toggle="collapse" data-bs-target="#collapseExample-@i" aria-expanded="false" aria-controls="collapseExample-@i" role="alert">
                        <div class="row">
                            <div class="col">
                                @question.Title
                            </div>
                            <div class="col-auto">
                                <button type="button" class="oi oi-plus btn btn-interactable"></button>
                            </div>
                        </div>
                        <div class="collapse mt-3" id="collapseExample-@i">
                            <div class="card card-body bg-transparent text-start">
                                @md.Render(question.HintText)
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    </div>
    <div class="row bg-white p-3">
        <div class="header col-xl-3 mb-3">
            <h1>Leaderboard</h1>
            <div>
                The top participants will recieve prizes at the end of the conference.
            </div>
            <div class="mx-auto text-center my-3 d-none d-xl-block">
                <a href="/leaderboard" class="w-100 btn btn-lg btn-primary btn-interactable">Full leaderboard</a>
            </div>
        </div>
        <div class="col-xl-9">
            <Leaderboard />
        </div>
        <div class="col-12">
            <div class="mx-auto text-center col-12 col-md-6 my-3 d-block d-xl-none">
                <a href="/leaderboard" class="w-100 btn btn-lg btn-primary btn-interactable">Full leaderboard</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Player? player { get; set; }

    ScannerModal? scannerModal { get; set; }

    List<Question>? ActiveQuestions { get; set; }
    List<Question>? CompletedQuestions { get; set; }

    string ManualQuestionCode { get; set; }

    List<Player>? Leaderboard { get; set; }
    int PlayerPosition { get; set; } = -1;


    protected override async Task OnInitializedAsync()
    {
        player = await players.GetCurrent();
        if (player == null)
        {
            Console.WriteLine("ERROR: Player null on landing component!");
            return;
        }

        var allActiveQuestions = await questions.Active();

        var totalCount = allActiveQuestions.Count;

        CompletedQuestions = allActiveQuestions.Where(q => q.IsCompleted(player)).ToList();

        var lockedQuestions = allActiveQuestions.Where(q => !q.HasAccess(player));

        ActiveQuestions = allActiveQuestions.Where(q => !q.IsCompleted(player) && q.HasAccess(player)).ToList();
        Leaderboard = await leaders.Leaderboard(5);
        PlayerPosition = await leaders.GetPosition(player);
    }

    async Task SubmitQuestionCode(string code)
    {
        var question = await questions.GetFromShortCode(code);
        if (question != default)
        {
            nav.NavigateTo($"/q/{code}");
        }
        else
        {
            nav.NavigateTo($"404");
        }
    }

    async Task QrSuccess(string text)
    {
        var regex = new Regex("https?:\\/\\/hunt\\.siggraph\\.org\\/q\\/(?<id>.+)");
        var match = regex.Match(text);
        if(match.Success)
        {
            var qId = match.Groups[1].Value;
            await js.HideModal("scannerModal");
            await SubmitQuestionCode(qId);
        }
    }
}