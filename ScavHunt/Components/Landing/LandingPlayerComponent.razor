@using ScavHunt.Data.Models
@using System.Text.RegularExpressions
@inject NavigationManager nav;
@inject QuestionService questions;
@inject MarkdownService md;
@inject JSInterop js;
@inject LeaderboardService leaders;

<ScannerModal @ref="@scannerModal" Id="scannerModal" Title="Scan QR Code" CloseText="Cancel" />

<div class="container">
    <div class="row spacer bg-secondary p-3">
        <div class="header text-primary col-xl-3 mb-3">
            <h1>Start a question</h1>
            <div class="text-black">
                Find and scan the QR codes hidden around the conference.  Answer the questions quickly to collect the most points!
            </div>
        </div>
        <form class="col-xl-9 my-auto row p-0 m-0" @onsubmit="async () => await SubmitQuestionCode(ManualQuestionCode)">
            <div class="col-auto">
                <button type="button" class="btn btn-lg btn-interactable" @onclick="@(async () => await scannerModal.Show())"><span class="oi oi-camera-slr"></span></button>
            </div>
            <div class="col">
                <input type="text" class="form-control form-control-lg" placeholder="Enter question code" @bind-value="@ManualQuestionCode"/>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-lg btn-interactable"><span class="oi oi-media-play"></span></button>
            </div>
            <input type="submit" hidden />
        </form>
    </div>
    <div class="row spacer bg-white p-3">
        <div class="header text-primary col-xl-3 mb-3">
            <h1>Current Hints</h1>
            <div class="text-black">
                Here are some hints for the currently active questions.
            </div>
        </div>
        <div class="col-xl-9 my-auto">
            @if (ActiveQuestions != default)
            {
                @for (int i = 0; i < ActiveQuestions.Count; i++)
                {
                    var question = ActiveQuestions[i];
                    var complete = player?.PointTransactions.Any(p => p.Question?.Id == question.Id) ?? false;

                    <div class="@(complete ? "alert-secondary" : "alert-primary") p-3 w-100 spacer cursor-pointer" data-bs-toggle="collapse" data-bs-target="#collapseExample-@i" aria-expanded="false" aria-controls="collapseExample-@i" role="alert">
                        <div class="row">
                            <div class="col">
                                @question.Title
                            </div>
                            <div class="col-auto">
                                <button type="button" class="oi oi-plus btn btn-interactable"></button>
                            </div>
                        </div>
                        <div class="collapse mt-3" id="collapseExample-@i">
                            <div class="card card-body bg-transparent text-start">
                                @md.Render(question.HintText)
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="row spacer bg-primary p-3">
        <div class="header text-white col-xl-3 mb-3">
            <h1>Leaderboard</h1>
            <div class="text-secondary">
                The top participants will recieve prizes at the end of the conference.
            </div>
        </div>
        <div class="col-xl-9">
            <table class="table table-striped table-primary table-hover h-100">
                <tbody>
                    @for(int i = 0; i < Leaderboard?.Count; i++)
                    {
                        var index = i;
                        var leader = Leaderboard[index];
                        <tr>
                            <td>@(index + 1)</td>
                            <td>@leader.BadgeNumber</td>
                            <td>@leader.PointTransactions.Sum(p => p.Value)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Player? player { get; set; }

    ScannerModal scannerModal { get; set; }

    List<Question>? ActiveQuestions { get; set; }

    string ManualQuestionCode { get; set; }

    List<Player>? Leaderboard { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ActiveQuestions = await questions.Active();
        Leaderboard = await leaders.FullLeaderboard();
    }

    async Task SubmitQuestionCode(string code)
    {
        //^\d{N}$ - Checks for N digit string ex: "1234...N"
        if(Regex.IsMatch(code, $"^\\d{{{Question.SHORT_CODE_LENGTH}}}$"))
        {
            var question = await questions.GetFromShortCode(code);
            if(question != default)
            {
                nav.NavigateTo($"/q/{code}");
            }
            else
            {
                nav.NavigateTo($"404");
            }
        }
    }
}