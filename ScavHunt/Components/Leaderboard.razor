@using ScavHunt.Data.Models
@inject LeaderboardService leaders
@inject PlayerService players

<table class="table table-striped table-primary table-hover h-100">
    <tbody>
        @for (int i = PaginationLowPosition; i < LeaderboardData?.Count && i < PaginationHighPosition; i++)
        {
            var index = i;
            var leader = LeaderboardData[index];
            <tr class="@(leader.Id == player?.Id ? "fw-bold": "")">
                <td>@(index + 1)</td>
                <td>@leader.User.DisplayName</td>
                <td class="text-right">@leaders.PointString(LeaderboardData, leader)</td>
            </tr>
        }

        @if (PlayerPosition != -1 && (PlayerPosition < PaginationLowPosition || PlayerPosition >= PaginationHighPosition))
        {
            <tr>
                <td>&#x200b;</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td>
                    @(
                        PlayerPosition == -1 ? "" : PlayerPosition + 1
                        )
                </td>
                <td>@player.User.DisplayName</td>
                <td class="text-right">@leaders.PointString(LeaderboardData, player)</td>
            </tr>

        }
    </tbody>
</table>
@if (Count == 0 && LeaderboardData != null)
{
    <div class="row">
        <Pagination ItemsPerPage="ItemsPerPage" Page="Page" TotalItems="LeaderboardData.Count" PageChanged="(p) => Page = p" />
    </div>
}

@code {
    [Parameter]
    public int Count { get; set; } = 5;

    List<Player>? LeaderboardData { get; set; }
    int PlayerPosition { get; set; } = -1;

    Player? player { get; set; }

    int ItemsPerPage { get; set; } = 20;
    int Page { get; set; }

    int PaginationLowPosition => Page * ItemsPerPage;
    int PaginationHighPosition => PaginationLowPosition + ItemsPerPage;

    protected override async Task OnInitializedAsync()
    {
        player = await players.GetCurrentWithPointTransactions();
        LeaderboardData = await leaders.Leaderboard(Count);
        if (player != null && LeaderboardData != null)
        {
            PlayerPosition = LeaderboardData.FindIndex(p => p.Id == player.Id);
        }
    }
}
