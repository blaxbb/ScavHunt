@using Newtonsoft.Json
@using ScavHunt.Data.Models
@using static ScavHunt.Pages.Admin.Questions
@inject JSInterop js
@inject QuestionAdminService questions

<Modal Id="@ImportId" Title="Import" Confirmed="DoImport" ConfirmText="@(Importing == null ? null : ConfirmText)" CloseText="@(Importing == null ? null : CancelText)" FooterText=@FooterText>
    <div class="container-fluid">
        <div class="row">
            <label>
                <InputFile OnChange="LoadFiles" />
            </label>
        </div>
        @if(loading)
        {
            <div class="row">
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
                </div>
            </div>
        }
        @if(Existing != null && Importing != null)
        {
            <div class="row my-3">
                <h5 class="py-1">@($"Unchanged: {UnchangedQuestions.Count} questions")</h5>
            </div>
            <div class="row my-3">
                <h5 class="py-1">@($"To Update: {UpdatedQuestions.Count} questions")</h5>
                    @foreach (var q in UpdatedQuestions)
                    {
                        <div class="col-6">
                            <div class="py-1">@($"{q.old.ShortCode} - {q.old.Title}")</div>
                        </div>
                        <div class="col-6">
                            <div class="py-1">@($"{q.updated.ShortCode} - {q.updated.Title}")</div>
                        </div>
                    }
            </div>
            <div class="row my-3">
                <div class="col-6">
                    <h5 class="py-1">@($"To Remove: {ToRemoveQuestions.Count} questions")</h5>
                    @foreach (var q in ToRemoveQuestions)
                    {
                        <div class="py-1">@($"{q.ShortCode} - {q.Title}")</div>
                    }
                </div>
                <div class="col-6">
                    <h5 class="py-1">@($"To Add: {NewQuestions.Count()} questions")</h5>
                    @foreach (var q in NewQuestions)
                    {
                        <div class="py-1">@($"{q.ShortCode} - {q.Title}")</div>
                    }
                </div>
            </div>
        }

    </div>
</Modal>

@code {
    const string ImportId = "ImportModal";

    bool loading = false;

    QuestionTreeNode Existing;
    QuestionTreeNode Importing;

    List<Question> NewQuestions = new();
    List<Question> ToRemoveQuestions = new();
    List<(Question old, Question updated)> UpdatedQuestions = new();
    List<(Question old, Question updated)> UnchangedQuestions = new();

    const string ConfirmText = "Confirm";
    const string CancelText = "Cancel";

    string FooterText => $"This is irreversible, would you like to continue?  {(ToRemoveQuestions.Count > 0 ? "This WILL break log entries and player question status for all removed questions!!!" : "")}";


    public async Task Show()
    {
        Existing = null;
        Importing = null;
        StateHasChanged();
        await js.ShowModal(ImportId);
    }

    private async Task DoImport()
    {
        var dbg = await Delete(Existing);

        dbg.AddRange(await AddOrUpdate(Importing));
        Console.WriteLine("-----------------");
        foreach(var d in dbg)
        {
            Console.WriteLine(d);
        }
    }

    async Task<List<string>> Delete(QuestionTreeNode node)
    {
        var dbg = new List<string>();

        if(node.Question != null && ToRemoveQuestions.Any(q => q.Id == node.Question.Id))
        {
            Console.WriteLine($"Deleting question - {node.Question.ShortCode} - {node.Question.Title}");
            await questions.Delete(node.Question);
            dbg.Add($"Deleting question - {node.Question.ShortCode} - {node.Question.Title}");
        }

        foreach(var child in node.Children)
        {
            var res = await Delete(child);
            dbg.AddRange(res);
        }

        return dbg;
    }

    async Task<List<string>> AddOrUpdate(QuestionTreeNode node, Question parent = null)
    {
        var dbg = new List<string>();

        Question? created = null;

        if(node.Question != null)
        {
            if(parent != null)
            {
                node.Question.ParentQuestion = parent;
            }

            if(NewQuestions.Any(q => q.Id == node.Question.Id))
            {
                node.Question.Id = 0;
                created = await questions.Add(node.Question);
                Console.WriteLine($"Creating question - {node.Question.ShortCode} - {node.Question.Title}");
                dbg.Add($"Creating question - {node.Question.ShortCode} - {node.Question.Title}");
            }
            else if(UpdatedQuestions.Any(q => q.old.Id == node.Question.Id))
            {
                created = await questions.Update(node.Question);
                Console.WriteLine($"Updating question - {node.Question.ShortCode} - {node.Question.Title}");
                dbg.Add($"Updating question - {node.Question.ShortCode} - {node.Question.Title}");
            }
            else
            {
                dbg.Add($"Unchanged question - {node.Question.ShortCode} - {node.Question.Title}");
                created = node.Question;
            }
        }

        foreach(var child in node.Children)
        {
            var res = await AddOrUpdate(child, created);
            dbg.AddRange(res);
        }

        return dbg;
    }

    private async Task LoadFiles(InputFileChangeEventArgs args)
    {
        loading = true;
        try
        {
            using var stream = new MemoryStream();
            await args.File.OpenReadStream().CopyToAsync(stream);
            var text = System.Text.Encoding.UTF8.GetString(stream.GetBuffer());
            Importing = JsonConvert.DeserializeObject<QuestionTreeNode>(text) ?? new(null, null);
            var all = await questions?.All() ?? new();
            Existing = new(default);
            Existing = Existing.GrowTree(Existing, all);

            var impAll = Importing.Flatten();

            ToRemoveQuestions = new();
            NewQuestions = new();
            UpdatedQuestions = new();
            UnchangedQuestions.Clear();

            foreach(var import in impAll)
            {
                var existing = all.FirstOrDefault(q => q.Id == import.Id);
                if(existing == default)
                {
                    NewQuestions.Add(import);
                }
                else
                {
                    if(existing.Equals(import))
                    {
                        UnchangedQuestions.Add((existing, import));
                    }
                    else
                    {
                        UpdatedQuestions.Add((existing, import));
                    }
                }
            }

            foreach(var existing in all)
            {
                if(!(UpdatedQuestions.Any(pair => pair.old.Id == existing.Id) || UnchangedQuestions.Any(pair => pair.old.Id == existing.Id)))
                {
                    ToRemoveQuestions.Add(existing);
                }
            }
        }
        catch(Exception e) {
            Console.WriteLine(e.Message);
        }
        loading = false;
    }
}
