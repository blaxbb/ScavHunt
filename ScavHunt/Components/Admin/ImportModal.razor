@using Newtonsoft.Json
@using ScavHunt.Data.Models
@using static ScavHunt.Pages.Admin.Questions
@using CsvHelper
@inject JSInterop js
@inject QuestionAdminService questions

<Modal Id="@ImportId" Title="Import" Confirmed="DoImport" ConfirmText="@(Importing == null ? null : ConfirmText)" CloseText="@(Importing == null ? null : CancelText)" FooterText=@FooterText>
    <div class="container-fluid">
        <div>
            <label>
                <InputFile OnChange="LoadFiles" />
            </label>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="DoUpdate" id="checkUpdate">
                <label class="form-check-label" for="checkUpdate">
                    Update
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="DoRemove" id="checkRemove">
                <label class="form-check-label" for="checkRemove">
                    Remove
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="DoAdd" id="checkAdd">
                <label class="form-check-label" for="checkAdd">
                    Add
                </label>
            </div>
        </div>
        @if(loading)
        {
            <div class="row">
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
                </div>
            </div>
        }
        @if(Existing != null && Importing != null)
        {
            <div class="row my-3">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="true" data-bs-toggle="tab" href="#updateQuestions">To Update <span class="badge bg-primary my-auto">@UpdatedQuestions.Count</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#removeQuestions">To Remove <span class="badge bg-primary my-auto">@ToRemoveQuestions.Count</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#addQuestions">To Add <span class="badge bg-primary my-auto">@NewQuestions.Count</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#unchangedQuestions">Unchanged <span class="badge bg-primary my-auto">@UnchangedQuestions.Count</span></a>
                    </li>
                </ul>
            </div>
            <div class="row tab-content">
                <div class="tab-pane active" id="updateQuestions">
                    @if(UpdatedQuestions.Count == 0)
                    {
                        <div>No Questions will be updated.</div>
                    }

                    @foreach (var q in UpdatedQuestions)
                    {
                        <div class="row">
                            <div class="col">
                                <div class="py-1">@($"{q.old.Title}")</div>
                            </div>
                            <div class="col">
                                <div class="py-1">@($"{q.updated.Title}")</div>
                            </div>
                            <div class="col-auto">
                                <button class="btn btn-primary py-0 px-2 text-white" type="button" data-bs-toggle="collapse" data-bs-target="#updated_@q.old.Id" aria-expanded="false" aria-controls="collapseExample">
                                    ➕
                                </button>
                            </div>
                            <div class="col-12 collapse" id="updated_@q.old.Id">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <td></td>
                                            <td>Existing</td>
                                            <td>Updated</td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Title</td>
                                            <td>@q.old.Title</td>
                                            <td>@q.updated.Title</td>
                                        </tr>
                                        @if (q.old.ShortCode != q.updated.ShortCode)
                                        {
                                            <tr>
                                                <td>ShortCode</td>
                                                <td>@q.old.ShortCode</td>
                                                <td>@q.updated.ShortCode</td>
                                            </tr>
                                        }
                                        @if (q.old.Vendor != q.updated.Vendor)
                                        {
                                            <tr>
                                                <td>Vendor</td>
                                                <td>@q.old.Vendor</td>
                                                <td>@q.updated.Vendor</td>
                                            </tr>
                                        }
                                        @if (q.old.Text != q.updated.Text)
                                        {
                                            <tr>
                                                <td>Text</td>
                                                <td>@q.old.Text</td>
                                                <td>@q.updated.Text</td>
                                            </tr>
                                        }
                                        @if (q.old.HintText != q.updated.HintText)
                                        {
                                            <tr>
                                                <td>HintText</td>
                                                <td>@q.old.HintText</td>
                                                <td>@q.updated.HintText</td>
                                            </tr>
                                        }
                                        @if (q.old.SuccessText != q.updated.SuccessText)
                                        {
                                            <tr>
                                                <td>SuccessText</td>
                                                <td>@q.old.SuccessText</td>
                                                <td>@q.updated.SuccessText</td>
                                            </tr>
                                        }
                                        @if (q.old.ShuffleAnswers != q.updated.ShuffleAnswers)
                                        {
                                            <tr>
                                                <td>ShuffleAnswers</td>
                                                <td>@(q.old.ShuffleAnswers ? "✅" : "❌")</td>
                                                <td>@(q.updated.ShuffleAnswers ? "✅" : "❌")</td>
                                            </tr>
                                        }
                                        @if (q.old.UnlockTime != q.updated.UnlockTime)
                                        {
                                            <tr>
                                                <td>UnlockTime</td>
                                                <td>@q.old.UnlockTime</td>
                                                <td>@q.updated.UnlockTime</td>
                                            </tr>
                                        }
                                        @if (q.old.LockTime != q.updated.LockTime)
                                        {
                                            <tr>
                                                <td>LockTime</td>
                                                <td>@q.old.LockTime</td>
                                                <td>@q.updated.LockTime</td>
                                            </tr>
                                        }
                                        @if (!q.old.Answers.SequenceEqual(q.updated.Answers))
                                        {
                                            <tr>
                                                <td>Answers</td>
                                                <td>@((MarkupString)String.Join("<br />", q.old.Answers))</td>
                                                <td>@((MarkupString)String.Join("<br />", q.updated.Answers))</td>
                                            </tr>
                                        }
                                        @if(q.old.ParentQuestion?.Id != q.updated.ParentQuestion?.Id)
                                        {
                                            <tr>
                                                <td>Parent</td>
                                                <td>@(q.old.ParentQuestion?.Title ?? "")</td>
                                                <td>@(q.updated.ParentQuestion?.Title ?? "")</td>
                                            </tr>
                                        }

                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
                <div class="tab-pane" id="removeQuestions">
                    @if (ToRemoveQuestions.Count == 0)
                    {
                        <div>No Questions will be removed.</div>
                    }

                    @foreach (var q in ToRemoveQuestions)
                    {
                        <div class="py-1">@($"{q.ShortCode} - {q.Title}")</div>
                    }
                </div>
                <div class="tab-pane" id="addQuestions">
                    @if (NewQuestions.Count == 0)
                    {
                        <div>No Questions will be added.</div>
                    }

                    @foreach (var q in NewQuestions)
                    {
                        <div class="py-1">@($"{q.ShortCode} - {q.Title}")</div>
                    }
                </div>
                <div class="tab-pane" id="unchangedQuestions">
                    @if (UnchangedQuestions.Count == 0)
                    {
                        <div>All existing questions will be changed.</div>
                    }

                    @foreach (var q in UnchangedQuestions)
                    {
                        <div class="py-1">@($"{q.old.ShortCode} - {q.old.Title}")</div>
                    }
                </div>
            </div>
        }
    </div>
</Modal>

@code {
    const string ImportId = "ImportModal";

    bool loading = false;

    QuestionTreeNode Existing;
    QuestionTreeNode Importing;

    List<Question> NewQuestions = new();
    List<Question> ToRemoveQuestions = new();
    List<(Question old, Question updated)> UpdatedQuestions = new();
    List<(Question old, Question updated)> UnchangedQuestions = new();

    const string ConfirmText = "Confirm";
    const string CancelText = "Cancel";

    string FooterText => $"This is irreversible, would you like to continue?  {(ToRemoveQuestions.Count > 0 ? "This WILL break log entries and player question status for all removed questions!!!" : "")}";

    bool DoUpdate { get; set; } = true;
    bool DoRemove { get; set; } = true;
    bool DoAdd { get; set; } = true;


    public async Task Show()
    {
        Existing = null;
        Importing = null;
        StateHasChanged();
        await js.ShowModal(ImportId);
    }

    private async Task DoImport()
    {
        List<string> dbg = new();
        if(DoRemove)
        {
            dbg.AddRange(await Delete(Existing));
        }

        dbg.AddRange(await AddOrUpdate(Importing));
        Console.WriteLine("-----------------");
        foreach(var d in dbg)
        {
            Console.WriteLine(d);
        }
    }

    async Task<List<string>> Delete(QuestionTreeNode node)
    {
        var dbg = new List<string>();

        if(node.Question != null && ToRemoveQuestions.Any(q => q.Id == node.Question.Id))
        {
            Console.WriteLine($"Deleting question - {node.Question.ShortCode} - {node.Question.Title}");
            await questions.Delete(node.Question);
            dbg.Add($"Deleting question - {node.Question.ShortCode} - {node.Question.Title}");
        }

        foreach(var child in node.Children)
        {
            var res = await Delete(child);
            dbg.AddRange(res);
        }

        return dbg;
    }

    async Task<List<string>> AddOrUpdate(QuestionTreeNode node, Question parent = null)
    {
        var dbg = new List<string>();

        Question? created = null;

        if(node.Question != null)
        {
            if(parent != null)
            {
                node.Question.ParentQuestion = parent;
            }

            if(DoAdd && NewQuestions.Any(q => q.Id == node.Question.Id))
            {
                node.Question.Id = 0;
                created = await questions.Add(node.Question);
                Console.WriteLine($"Creating question - {node.Question.ShortCode} - {node.Question.Title}");
                dbg.Add($"Creating question - {node.Question.ShortCode} - {node.Question.Title}");
            }
            else if(DoUpdate && UpdatedQuestions.Any(q => q.old.Id == node.Question.Id))
            {
                created = await questions.Update(node.Question);
                Console.WriteLine($"Updating question - {node.Question.ShortCode} - {node.Question.Title}");
                dbg.Add($"Updating question - {node.Question.ShortCode} - {node.Question.Title}");
            }
            else
            {
                dbg.Add($"Unchanged question - {node.Question.ShortCode} - {node.Question.Title}");
                created = node.Question;
            }
        }

        foreach(var child in node.Children)
        {
            var res = await AddOrUpdate(child, created);
            dbg.AddRange(res);
        }

        return dbg;
    }

    private async Task LoadFiles(InputFileChangeEventArgs args)
    {
        loading = true;
        try
        {
            using var stream = new MemoryStream();
            await args.File.OpenReadStream().CopyToAsync(stream);
            var text = System.Text.Encoding.UTF8.GetString(stream.GetBuffer());
            if(args.File.Name.EndsWith(".json"))
            {
                await ImportJson(text);
            }
            else if(args.File.Name.EndsWith(".csv")) {
                await ImportCSV(text);
            }
        }
        catch(Exception e) {
            Console.WriteLine(e.Message);
        }
        loading = false;
    }

    private async Task ImportJson(string text) {
        Importing = JsonConvert.DeserializeObject<QuestionTreeNode>(text) ?? new(null, null);

        var impAll = Importing.Flatten();
        await Import(impAll, true, false);
    }

    private async Task ImportCSV(string text) {
        var csv = new CsvReader(new StringReader(text), System.Globalization.CultureInfo.InvariantCulture);

        List<Question> importing = new List<Question>();
        csv.Read();
        csv.ReadHeader();
        while(csv.Read())
        {
            var titleText = csv.GetField(1);
            var questionText = csv.GetField(3);
            var questionPic = csv.GetField(4);
            var choiceA = csv.GetField(6);
            var choiceB = csv.GetField(7);
            var choiceC = csv.GetField(8);
            var choiceD = csv.GetField(9);
            var correctChoice = csv.GetField(10);
            var answerText = csv.GetField(12);
            var answerPic = csv.GetField(13);
            var hintText = csv.GetField(15);
            var bonusClue = csv.GetField(16);
            var startTime = csv.GetField<long>(17);
            var endTime = csv.GetField<long>(18);
            var token = csv.GetField(19);

            if(!string.IsNullOrWhiteSpace(questionPic)) {
                questionText = $"![image](/assets/pictures/{questionPic})\n\n{questionText}";
            }

            if(!string.IsNullOrWhiteSpace(answerText))
            {
                answerText = $"![image](/assets/pictures/{answerPic})\n\n{answerText}";
            }

            string? tmp;
            switch(correctChoice)
            {
                case "B":
                    tmp = choiceA;
                    choiceA = choiceB;
                    choiceB = tmp;
                    break;
                case "C":
                    tmp = choiceA;
                    choiceA = choiceC;
                    choiceC = tmp;
                    break;
                case "D":
                    tmp = choiceA;
                    choiceA = choiceD;
                    choiceD = tmp;
                    break;
            }

            var choices = new List<string?>()
            {
                choiceA, choiceB, choiceC, choiceD
            };

            choices.RemoveAll(c => c == null);
            

            var question = new Question(){
                ShortCode = token,
                Text = questionText,
                HintText = string.IsNullOrWhiteSpace(hintText) ? "Hint" : hintText,
                Title = string.IsNullOrWhiteSpace(titleText) ? "Title" : titleText,
                ShuffleAnswers = true,
                Answers = choices,
                SuccessText = answerText,
                UnlockTime = DateTimeOffset.FromUnixTimeSeconds(startTime).UtcDateTime,
                LockTime = DateTimeOffset.FromUnixTimeSeconds(endTime).UtcDateTime
            };
            importing.Add(question);
        }

        Importing = new QuestionTreeNode(null, importing.Select(i => new QuestionTreeNode(i, new())).ToList());
        await Import(importing, false, false);
    }

    private async Task Import(IEnumerable<Question> importing, bool changeParents, bool matchId) {

        var all = await questions?.All() ?? new();
        Existing = new(default);
        Existing = Existing.GrowTree(Existing, all);

        ToRemoveQuestions = new();
        NewQuestions = new();
        UpdatedQuestions = new();
        UnchangedQuestions.Clear();

        foreach(var import in importing)
        {
            Question? existing;
            if(matchId)
            {
                existing = all.FirstOrDefault(q => q.Id == import.Id);
            }
            else
            {
                existing = all.FirstOrDefault(q => q.ShortCode == import.ShortCode);
            }

            if(existing == default)
            {
                NewQuestions.Add(import);
            }
            else
            {
                import.Id = existing.Id;
                
                var oldParent = Existing.FindParent(import);
                var newParent = Importing.FindParent(import);

                bool parentChanged;

                if(!changeParents || (oldParent == null && newParent == null) || (oldParent?.Equals(newParent) ?? false))
                {
                    parentChanged = false;
                }
                else
                {
                    parentChanged = true;
                    import.ParentQuestion = newParent;
                    existing.ParentQuestion = oldParent;
                }

                if(existing.Equals(import) && !parentChanged)
                {
                    UnchangedQuestions.Add((existing, import));
                }
                else
                {
                    UpdatedQuestions.Add((existing, import));
                }
            }
        }

        foreach(var existing in all)
        {
            if(!(UpdatedQuestions.Any(pair => pair.old.Id == existing.Id) || UnchangedQuestions.Any(pair => pair.old.Id == existing.Id)))
            {
                ToRemoveQuestions.Add(existing);
            }
        }
    }
}
