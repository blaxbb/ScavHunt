@using ScavHunt.Data.Models;
@inject JSInterop js
@inject PrizeAdminService prizes

<Modal Id="@Id" Title="Add Prize" CloseText="Cancel" ConfirmText="Submit" Confirmed="SubmitPrize">
    @if (All != null)
    {
        <div class="row card mb-3 mx-3">
            <select class="form-select" @bind=SelectedPrize>
                <option>Select a prize</option>
                @foreach (var prizeGroups in All.GroupBy(p => p.Type).OrderByDescending(g => g.Key))
                {
                    <optgroup label="@prizeGroups.Key">
                        @foreach (var prize in prizeGroups)
                        {
                            <option value="@prize.Id">@prize.Quantity - @prize.Name</option>
                        }
                    </optgroup>
                }
            </select>
        </div>
        <div class="row card mb-3 mx-3">
            @if (userPrizes != null)
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <td>Time</td>
                            <td>Type</td>
                            <td>Name</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in userPrizes.Skip(ItemsPerPage * PrizePage).Take(ItemsPerPage))
                        {
                            <tr class="@(SelectedPrizeObj != null && SelectedPrizeObj.Type == transaction.Prize.Type ? "table-warning" : "")">
                                <td>@transaction.Timestamp</td>
                                <td>@transaction.Prize.Type</td>
                                <td>@transaction.Prize.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <Pagination ItemsPerPage="ItemsPerPage" Page="PrizePage" TotalItems="userPrizes.Count" PageChanged="p => PrizePage = p" />
            }
        </div>
    }
</Modal>

@code {
    const string Id = "addPrizeModal";

    [Parameter]
    public ScavhuntUser? User { get; set; }

    [Parameter]
    public string? Badge { get; set; }

    List<Prize> All { get; set; }

    long? SelectedPrize { get; set; } = null;
    Prize? SelectedPrizeObj => All.FirstOrDefault(p => p.Id == SelectedPrize);


    [Parameter]
    public EventCallback Saved { get; set; }

    const int ItemsPerPage = 5;
    int PrizePage { get; set; }
    List<PrizeTransaction>? userPrizes { get; set; }

    public async Task Show()
    {
        All = await prizes.All();
        userPrizes = await prizes.UserPrizes(User, Badge);
        await js.ShowModal(Id);
    }

    public async Task Hide()
    {
        await js.HideModal(Id);
    }

    async Task SubmitPrize()
    {
        var prize = All.FirstOrDefault(p => p.Id == SelectedPrize);
        if (prize == default)
        {
            return;
        }

        var transaction = new PrizeTransaction()
            {
                User = User,
                Badge = Badge,
                Prize = prize
            };

        await prizes.CreateTransaction(transaction);

        SelectedPrize = null;

        await Hide();
        await Saved.InvokeAsync();
    }
}
