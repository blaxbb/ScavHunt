@page "/q/{QuestionId}"

<div class="container">
    <div class="row">
        <h5 class="text-center">How cool is [COMPANY NAME HERE]'s new product [PRODUCT NAME HERE]!</h5>
    </div>
    @if(State == QuestionState.LeadIn)
    {
        @for(int i = 0; i < 4; i++)
        {
            <div class="row">
                <button class="btn btn-outline-primary w-100 mb-3" type="button" disabled>
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </button>
            </div>
        }
    }
    @if (State == QuestionState.Active && Choices != null && Choices.Count > 0)
    {
        @for(int i = 0; i < DisplayChoices.Count; i++)
        {
            var index = i; // required for invoking ChoiceSelected properly

            var choice = DisplayChoices[index];
            var attempted = Attempted[index];

            <div class="row">
                <button class="btn @(attempted ? "btn-danger" : "btn-outline-primary") w-100 mb-3" type="button" disabled="@(attempted)" @onclick="@(() => ChoiceSelected(index))">@choice</button>
            </div>
        }

        var displayedProgress = Math.Max(ProgressPercent(), 20);

        <div class="row">
            <div class="progress p-0" style="height: 2rem;">
                <div class="progress-bar @ProgressClass()" role="progressbar" style="width: @displayedProgress%;" aria-valuenow="@displayedProgress" aria-valuemin="0" aria-valuemax="100">@(Points()) Points</div>
            </div>
        </div>
    }
    @if(State == QuestionState.Success)
    {
        var question = Choices.FirstOrDefault();
        var points = Points();
        <div class="row">
            <button class="btn btn-success w-100 mb-3" type="button" disabled>@question</button>
        </div>
        <div class="row">
            <h5 class="text-center">
                You have earned @points points!
            </h5>
        </div>
    }
</div>


@code {
    const int DeltaTime = 100;
    const double WrongPenalty = 5;

    QuestionState State { get; set; }
    enum QuestionState
    {
        LeadIn,
        Active,
        Success
    }

    [Parameter]
    public string QuestionId { get; set; }

    List<string> Choices { get; set; }
    List<string> DisplayChoices { get; set; }
    List<bool> Attempted { get; set; }


    double TotalTime = 20;
    double ElapsedTime = 0;

    Timer tickTimer;

    protected override void OnInitialized()
    {
        State = QuestionState.LeadIn;

        Task.Run(async () =>
        {
            Choices = new List<string>()
            {
                "The best thing ever invented!",
                "Meh.",
                "👎",
                "Reasonably good"
            };
            Attempted = new List<bool>();
            Attempted.AddRange(Enumerable.Repeat(false, Choices.Count));

            await Task.Delay(5000);

            DisplayChoices = Choices.OrderBy(c => Random.Shared.Next()).ToList();

            State = QuestionState.Active;

            await InvokeAsync(StateHasChanged);

            tickTimer = new System.Threading.Timer(_ =>
            {
                Tick(DeltaTime);
            }, null, DeltaTime, DeltaTime);
        });
    }

    void ChoiceSelected(int displayIndex)
    {
        if(State != QuestionState.Active)
        {
            return;
        }

        var choice = DisplayChoices[displayIndex];
        var index = Choices.IndexOf(choice);
        if(index == -1)
        {
            Console.WriteLine($"ERROR: Invalid choice selected on question {QuestionId} {choice}!");
            return;
        }

        if(index == 0)
        {
            State = QuestionState.Success;
            StopTimer();

            return;
        }

        if(index > 0 && index < Attempted.Count)
        {
            Attempted[displayIndex] = true;
        }

        if(ElapsedTime + WrongPenalty > TotalTime)
        {
            ElapsedTime = TotalTime;
            StopTimer();
        }
        else
        {
            ElapsedTime += WrongPenalty;
        }
    }

    int ProgressPercent()
    {
        return 100 - (int)(100 * (ElapsedTime / TotalTime));
    }

    void StopTimer()
    {
        tickTimer.Change(Timeout.Infinite, Timeout.Infinite);
    }

    int Points()
    {
        var progress = ProgressPercent();
        return progress switch
        {
            > 75 => 5,
            > 25 => 3,
            _ => 1
        };
    }

    string ProgressClass()
    {
        var progress = ProgressPercent();
        return progress switch
        {
            > 75 => "bg-success",
            > 50 => "bg-info",
            > 25 => "bg-warning",
            >= 0 => "bg-danger",
            _ => ""
        };
    }

    void Tick(int ms)
    {
        ElapsedTime += ms / 1000d;
        if(ElapsedTime >= TotalTime)
        {
            ElapsedTime = TotalTime;
            InvokeAsync(StopTimer);
        }
        InvokeAsync(StateHasChanged);
    }
}
