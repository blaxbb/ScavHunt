@page "/badge"
@attribute [Authorize]
@using System.Text.RegularExpressions;
@using Microsoft.Extensions.Options;
@using ScavHunt.Data.Models;
@inject PlayerService playerService
@inject NavigationManager nav
@inject IOptions<BadgeOptions> badgeOptions;

<ScannerModal Id="scannerModal" Title="Scan your badge" Success="OnScan" @ref=scannerModal/>

<div class="container">

    <div class="position-relative overflow-hidden">
        <div class="position-absolute line-bg">
        </div>
        <div class="row spacer bg-primary p-3">
            <div class="header col-xl-4 mb-3 z-index-4">
                <h1>Finalize Registration</h1>
            </div>
            <div class="col-xl-8 my-auto z-index-4">
                <div class="list-group list-group-flush p-3 mb-3 bg-secondary">

                    <p>
                        To finalize your registration, you must scan the QR Code which is on your conference badge.
                    </p>
                </div>
            </div>
        </div>
        <div class="row spacer bg-secondary p-3">
            <div class="col-12 z-index-4 text-center pb-3">
                <img class="mw-100" style="max-height:350px" src="/assets/badgeScan.png" />
            </div>
            <div class="col-12 text-center z-index-4">
                @if (DuplicateBadgeError)
                {
                    <div class="alert alert-danger">
                        There is already a registered player with that badge.  Please try again or contact <a class="alert-link" href="/info/support">Support</a> for help.
                    </div>
                }
                <button type="button" class="btn btn-lg btn-interactable mx-auto" @onclick="startScanning">Open camera</button>
            </div>
        </div>
    </div>
</div>

@code {
    ScannerModal? scannerModal;

    public bool DuplicateBadgeError { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ReturnUrl")]
    public string? ReturnUrl { get; set; }

    async Task startScanning()
    {
        scannerModal?.Show();
    }

    async Task OnScan(string text)
    {
        if(scannerModal == null)
        {
            return;
        }

        var match = Regex.Match(text, badgeOptions.Value.Regex);
        if(match.Success)
        {
            await scannerModal.Hide();

            if (await playerService.GetFromBadge(text) != null)
            {
                DuplicateBadgeError = true;
            }
            else
            {
                await playerService.SetBadgeId(text);
                nav.NavigateTo(ReturnUrl ?? "/");
            }
        }
    }
}
