@page "/q/{QuestionId}"
@using ScavHunt.Data.Models
@inject QuestionService questions;
@inject NavigationManager nav;
@inject LogService log;
@inject PlayerService players;
@inject PointService points;
@inject JSInterop js;
@inject MarkdownService md;

@if (State == QuestionState.Loading)
{
    <div class="container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (question != default)
{
    <div class="container">
        <div class="position-relative overflow-hidden">
            <div class="position-absolute line-bg">
            </div>
            <div class="row p-3 mx-0 spacer bg-primary text-center question">
                <div class="col-md-4 text-center my-auto z-index-4">
                    <h1>
                        @question.Title
                    </h1>

                    @if (incorrectCount > 0)
                    {
                        <h3>@incorrectCount Incorrect Answers</h3>
                    }
                    @if (ElapsedTime >= TotalTime)
                    {
                        <h3>@ElapsedTime.ToString("0.0+ sec")</h3>
                    }
                    else if (!IsBonus)
                    {
                        <h3>@ElapsedTime.ToString("0.0 sec")</h3>
                    }
                </div>
                @if (!IsBonus)
                {
                    <div class="col-md p-3 bg-secondary z-index-4">
                        <h5 class="">@md.Render(question.Text)</h5>
                    </div>
                }
            </div>
            <div class="row spacer bg-secondary p-3">
                @if (State == QuestionState.LeadIn)
                {
                    @for (int i = 0; i < 4; i++)
                    {
                        <div class="row bg-secondary choice py-3 my-0 z-index-4 @(i < 3 ? "spacer" : "")">
                            <div class="col justify-content-center d-flex">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    }
                }
                @if (State == QuestionState.Active)
                {
                    @for (int i = 0; i < DisplayChoices.Count; i++)
                    {
                        var index = i; // required for invoking ChoiceSelected properly

                        var choice = DisplayChoices[index];
                        var attempted = Attempted[index];

                        <div class="row @(attempted ? "bg-danger" : "bg-secondary") z-index-4 cursor-pointer choice py-3 my-0 @(i < DisplayChoices.Count - 1 ? "spacer" : "")" @onclick="@(() => ChoiceSelected(index))">
                            <div class="col text-center my-auto">@choice</div>
                            <div class="col-auto arrow-bg mx-3 @(attempted ? "invisible" : "")">
                                <div class="arrow my-auto mx-auto">
                                </div>
                            </div>
                        </div>
                    }

                    var displayedProgress = Math.Max(ProgressPercent(), 20);
                }
                @if (State == QuestionState.Success)
                {
                    var answer = question.Answers.FirstOrDefault();
                    var points = Points();
                    @if (answer != null)
                    {
                        <div class="row bg-success choice py-3 my-0 spacer z-index-4">
                            <div class="col text-center my-auto fw-bold">@answer</div>
                        </div>
                    }
                    <div class="row my-3 z-index-4">
                        <h3 class="text-center">
                            You have earned @points points!
                        </h3>
                    </div>
                    <div class="row my-3 text-center z-index-4 success">
                        @md.Render(question.SuccessText)
                    </div>
                    <div class="row my-3 mx-0 z-index-4">
                        <h1>Current Hints</h1>
                        @for (int i = 0; i < ActiveQuestions.Count; i++)
                        {
                            var question = ActiveQuestions[i];
                            var complete = player?.PointTransactions.Any(p => p.Question?.Id == question.Id) ?? false;

                            <div class="list-item p-3 w-100 spacer cursor-pointer z-index-4" data-bs-toggle="collapse" data-bs-target="#collapseExample-@i" aria-expanded="false" aria-controls="collapseExample-@i" role="alert">
                                <div class="row">
                                    <div class="col">
                                        @question.Title
                                    </div>
                                    <div class="col-auto">
                                        <button type="button" class="oi oi-plus btn btn-interactable"></button>
                                    </div>
                                </div>
                                <div class="collapse mt-3" id="collapseExample-@i">
                                    <div class="card card-body bg-transparent text-start">
                                        @md.Render(question.HintText)
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row my-3 z-index-4">
                        <div class="mx-auto col-12 col-md-6 col-xl-4 text-center">
                            <a href="/" class="w-100 btn btn-lg btn-primary btn-interactable">Back home</a>
                        </div>
                    </div>
                }
                @if (State == QuestionState.EarlyLocked)
                {
                    <div class="row bg-primary text-white choice py-3 my-0 spacer z-index-4">
                        <div class="col text-center my-auto">@($"You are {(question.UnlockTime - DateTime.Now).Humanize()} early!")</div>
                    </div>
                    <div class="row my-3 z-index-4">
                        <div class="mx-auto col-12 col-md-6 col-xl-4 text-center">
                            <a href="/" class="w-100 btn btn-lg btn-primary btn-interactable">Back home</a>
                        </div>
                    </div>
                }
                @if (State == QuestionState.LateLocked)
                {
                    <div class="row bg-primary text-white choice py-3 my-0 spacer z-index-4">
                        <div class="col text-center my-auto">@($"This question has expired, you are {(DateTime.Now - question.LockTime).Humanize()} late.")</div>
                    </div>
                    <div class="row my-3 z-index-4">
                        <div class="mx-auto col-12 col-md-6 col-xl-4 text-center">
                            <a href="/" class="w-100 btn btn-lg btn-primary btn-interactable">Back home</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    const int DeltaTime = 100;

    QuestionState State { get; set; }
    enum QuestionState
    {
        Loading,
        LeadIn,
        Active,
        Success,
        EarlyLocked,
        LateLocked
    }

    [Parameter]
    public string QuestionId { get; set; }

    Question question { get; set; }
    List<string> DisplayChoices { get; set; }
    List<bool> Attempted { get; set; }


    double TotalTime = 20;
    double ElapsedTime = 0;

    int incorrectCount { get; set; }

    Timer tickTimer;

    Player player;

    bool IsBonus => question?.Answers.Count == 0;

    List<Question> ActiveQuestions { get; set; }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first)
        {
            return;
        }
        ElapsedTime = 0;

        player = await players.GetCurrent();

        if (player == default)
        {
            nav.NavigateTo($"/Identity/Account/Login?returnUrl=/q/{QuestionId}", true);
            return;
        }
        else if (string.IsNullOrWhiteSpace(player.User.BadgeId))
        {
            nav.NavigateTo($"/badge?returnUrl=/q/{QuestionId}");
            return;
        }

        question = await questions.GetFromShortCode(QuestionId);

        if (question == default)
        {
            await log.NotFound($"/q/{QuestionId}", player.User);
            nav.NavigateTo("404");
            return;
        }

        var succeededResponse = player.PointTransactions.FirstOrDefault(p => p.Question?.Id == question.Id);
        if (succeededResponse != default)
        {
            State = QuestionState.Success;
            await SetActiveQuestions();
            StateHasChanged();
            return;
        }

        if (question.IsCurrentlyLockedEarly())
        {
            State = QuestionState.EarlyLocked;
            StateHasChanged();
            return;
        }

        if (question.IsCurrentlyLockedLate())
        {
            State = QuestionState.LateLocked;
            StateHasChanged();
            return;
        }

        if (IsBonus)
        {
            await Success();
            return;
        }

        if (player.User.Responses.Any(r => r.Type == LogRecord.RecordType.StartedQuestion && r.Question?.Id == question.Id))
        {
            ElapsedTime = TotalTime;
        }

        var incorrectResponses = player.User.Responses.Where(r => r.Type == LogRecord.RecordType.IncorrectAnswer && r.Question?.Id == question.Id);
        incorrectCount = incorrectResponses.Count();

        State = QuestionState.LeadIn;
        StateHasChanged();

        Attempted = new List<bool>();
        Attempted.AddRange(Enumerable.Repeat(false, question.Answers.Count));

        _ = Task.Run(async () =>
        {
            if (ElapsedTime == 0)
            {
                await Task.Delay(5000);
            }

            await log.Question(player, question, LogRecord.RecordType.StartedQuestion, $"Started question {question.ShortCode}.");

            if (question.ShuffleAnswers)
            {
                DisplayChoices = question.Answers.OrderBy(c => Random.Shared.Next()).ToList();
            }
            else
            {
                DisplayChoices = question.Answers.ToList();
            }

            State = QuestionState.Active;

            await InvokeAsync(StateHasChanged);

            tickTimer = new System.Threading.Timer(_ =>
            {
                Tick(DeltaTime);
            }, null, DeltaTime, DeltaTime);
        });
    }

    async Task ChoiceSelected(int displayIndex)
    {
        if (State != QuestionState.Active)
        {
            return;
        }

        var choice = DisplayChoices[displayIndex];
        var index = question.Answers.IndexOf(choice);
        if (index == -1)
        {
            Console.WriteLine($"ERROR: Invalid choice selected on question {QuestionId} {choice}!");
            return;
        }

        if (index == 0)
        {
            await Success(choice);

            return;
        }
        if (index > 0 && index < Attempted.Count && !Attempted[displayIndex])
        {
            await log.Question(player, question, LogRecord.RecordType.IncorrectAnswer, $"Answered with {choice} instead of {question.Answers.FirstOrDefault()}.", index);

            incorrectCount++;

            Attempted[displayIndex] = true;
        }
    }

    async Task Success(string? choice = null)
    {
        State = QuestionState.Success;
        var currentPlayerState = await players.GetCurrent();
        var existingResponse = currentPlayerState?.PointTransactions.FirstOrDefault(p => p.Question?.Id == question.Id);
        if (existingResponse != null)
        {
            // the player has already submitted a response to this question...
            await log.Message(LogRecord.RecordType.Player, player.User, $"Player submitted responses to question {question.Title} multiple times.  Not including this submission in point calculations.  Player was already awarded {existingResponse.Value} with a time of {existingResponse.Duration}");
            StopTimer();
            StateHasChanged();
            return;
        }

        if (IsBonus)
        {
            await log.Question(player, question, LogRecord.RecordType.CompletedQuestion, $"Completed bonus worth {Points()} points.");
        }
        else
        {
            await log.Question(player, question, LogRecord.RecordType.CompletedQuestion, $"Answered with {choice ?? "NULL"} in {ElapsedTime.ToString("N2")} seconds  for {Points()} points.", 0);
        }

        await points.AddPoints(player, question, Points(), ElapsedTime);
        StopTimer();

        await SetActiveQuestions();

        StateHasChanged();
    }

    int ProgressPercent()
    {
        return 100 - (int)(100 * (ElapsedTime / TotalTime));
    }

    void StopTimer()
    {
        tickTimer?.Change(Timeout.Infinite, Timeout.Infinite);
    }

    int Points()
    {
        return incorrectCount switch
        {
            0 => 20,
            1 => 15,
            2 => 10,
            3 => 5,
            _ => 0

        };
    }

    async Task SetActiveQuestions()
    {
        var allActiveQuestions = await questions.Active();
        ActiveQuestions = allActiveQuestions.Where(q => !q.IsCompleted(player) && q.HasAccess(player)).ToList();
    }


    void Tick(int ms)
    {
        ElapsedTime += ms / 1000d;
        if (ElapsedTime >= TotalTime)
        {
            ElapsedTime = TotalTime;
            InvokeAsync(StopTimer);
        }
        InvokeAsync(StateHasChanged);
    }
}
