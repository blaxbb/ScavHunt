@page "/q/{QuestionId}"
@using ScavHunt.Data.Models
@inject QuestionService questions;
@inject NavigationManager nav;
@inject LogService log;
@inject PlayerService players;
@inject PointService points;
@inject JSInterop js;
@inject MarkdownService md;

@if(State == QuestionState.Loading)
{
    <div class="container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if(question != default)
{
    <div class="container">
        <div class="row py-3 spacer">
            <div class="col-md-4 text-center my-auto text-primary">
                <h3>
                    @question.Title
                </h3>
            </div>
            <div class="col-md">
                <h5 class="">@md.Render(question.Text)</h5>
            </div>
        </div>
        @if(State == QuestionState.LeadIn)
        {
            @for(int i = 0; i < 4; i++)
            {
                <div class="row">
                    <button class="btn btn-outline-primary w-100 mb-3" type="button" disabled>
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </button>
                </div>
            }
        }
        @if (State == QuestionState.Active)
        {
            @for(int i = 0; i < DisplayChoices.Count; i++)
            {
                var index = i; // required for invoking ChoiceSelected properly

                var choice = DisplayChoices[index];
                var attempted = Attempted[index];

                <div class="row d-none">
                    <button class="btn @(attempted ? "btn-danger" : "btn-outline-primary") w-100 mb-3" type="button" disabled="@(attempted)" @onclick="@(() => ChoiceSelected(index))">@choice</button>
                </div>
                <div class="row bg-secondary cursor-pointer choice py-3 my-0 @(i < DisplayChoices.Count - 1 ? "spacer" : "")" @onclick="@(() => ChoiceSelected(index))">
                    <div class="col">@choice</div>
                    <div class="col-auto arrow-bg mx-3">
                        <div class="arrow my-auto mx-auto">
                        </div>
                    </div>
                </div>
            }

            var displayedProgress = Math.Max(ProgressPercent(), 20);

            <div class="row mt-3">
                <div class="progress p-0" style="height: 2rem;">
                    <div class="progress-bar @ProgressClass()" role="progressbar" style="width: @displayedProgress%;" aria-valuenow="@displayedProgress" aria-valuemin="0" aria-valuemax="100">@(Points()) Points</div>
                </div>
            </div>
        }
        @if(State == QuestionState.Success)
        {
            var answer = question.Answers.FirstOrDefault();
            var points = Points();
            <div class="row">
                <button class="btn btn-success w-100 mb-3" type="button" disabled>@answer</button>
            </div>
            <div class="row">
                <h5 class="text-center">
                    You have earned @points points!
                </h5>
            </div>
        }
    </div>
}

@code {
    const int DeltaTime = 100;
    const double WrongPenalty = 5;

    QuestionState State { get; set; }
    enum QuestionState
    {
        Loading,
        LeadIn,
        Active,
        Success
    }

    [Parameter]
    public string QuestionId { get; set; }

    Question question{ get; set; }
    List<string> DisplayChoices { get; set; }
    List<bool> Attempted { get; set; }


    double TotalTime = 20;
    double ElapsedTime = 0;

    Timer tickTimer;

    Player player;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if(!first)
        {
            return;
        }

        player = await players.GetCurrent();

        if(player == default)
        {
            nav.NavigateTo("player");
            return;
        }

        question = await questions.GetFromShortCode(QuestionId);

        if(question == default)
        {
            nav.NavigateTo("404");
            return;
        }

        var succeededResponse = player.PointTransactions.FirstOrDefault(p => p.Question?.Id == question.Id);
        if(succeededResponse != default)
        {
            SetElapsed(succeededResponse.Value);
            State = QuestionState.Success;
            StateHasChanged();
            return;
        }

        if(player.Responses.Any(r => r.Type == LogRecord.RecordType.StartedQuestion && r.Question?.Id == question.Id))
        {
            ElapsedTime = TotalTime;
        }

        State = QuestionState.LeadIn;
        StateHasChanged();

        Attempted = new List<bool>();
        Attempted.AddRange(Enumerable.Repeat(false, question.Answers.Count));

        Task.Run(async () =>
        {
            if (ElapsedTime == 0)
            {
                await Task.Delay(5000);
            }

            await log.Question(player, question, LogRecord.RecordType.StartedQuestion, $"Started question {question.ShortCode}.");

            DisplayChoices = question.Answers.OrderBy(c => Random.Shared.Next()).ToList();
            State = QuestionState.Active;

            await InvokeAsync(StateHasChanged);

            tickTimer = new System.Threading.Timer(_ =>
            {
                Tick(DeltaTime);
            }, null, DeltaTime, DeltaTime);
        });   
    }

    async Task ChoiceSelected(int displayIndex)
    {
        if(State != QuestionState.Active)
        {
            return;
        }

        var choice = DisplayChoices[displayIndex];
        var index = question.Answers.IndexOf(choice);
        if(index == -1)
        {
            Console.WriteLine($"ERROR: Invalid choice selected on question {QuestionId} {choice}!");
            return;
        }

        if(index == 0)
        {
            State = QuestionState.Success;
            await log.Question(player, question, LogRecord.RecordType.CompletedQuestion, $"Answered with {choice} in {ElapsedTime.ToString("N2")} seconds  for {Points()} points.");

            await points.AddPoints(player, question, Points());
            StopTimer();

            return;
        }

        await log.Question(player, question, LogRecord.RecordType.IncorrectAnswer, $"Answered with {choice} instead of {question.Answers.FirstOrDefault()}.");

        if(index > 0 && index < Attempted.Count)
        {
            Attempted[displayIndex] = true;
        }

        if(ElapsedTime + WrongPenalty > TotalTime)
        {
            ElapsedTime = TotalTime;
            StopTimer();
        }
        else
        {
            ElapsedTime += WrongPenalty;
        }
    }

    int ProgressPercent()
    {
        return 100 - (int)(100 * (ElapsedTime / TotalTime));
    }

    void StopTimer()
    {
        tickTimer.Change(Timeout.Infinite, Timeout.Infinite);
    }

    int Points()
    {
        var progress = ProgressPercent();
        return progress switch
        {
            > 75 => 5,
            > 25 => 3,
            _ => 1
        };
    }

    void SetElapsed(int points)
    {
        ElapsedTime = points switch
        {
            5 => .24d * TotalTime,
            3 => .5d * TotalTime,
            _ => TotalTime
        };
    }

    string ProgressClass()
    {
        var progress = ProgressPercent();
        return progress switch
        {
            > 75 => "bg-success",
            > 50 => "bg-info",
            > 25 => "bg-warning",
            >= 0 => "bg-danger",
            _ => ""
        };
    }

    void Tick(int ms)
    {
        ElapsedTime += ms / 1000d;
        if(ElapsedTime >= TotalTime)
        {
            ElapsedTime = TotalTime;
            InvokeAsync(StopTimer);
        }
        InvokeAsync(StateHasChanged);
    }
}
