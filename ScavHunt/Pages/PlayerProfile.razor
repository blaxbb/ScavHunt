@page "/player"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Identity;
@using ScavHunt.Data.Models
@inject PlayerService players
@inject JSInterop js;
@inject NavigationManager nav;
@inject SignInManager<ScavhuntUser> SignInManager;
@inject AuthenticationStateProvider auth;
@inject UserManager<ScavhuntUser> users;

@if (State == LoginState.Loading)
{
    <div class="container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (State == LoginState.Register)
{
    <div class="container">
        <h3>Register to play</h3>
        <div class="form">
            <input class="form-control" type="text" @oninput="@((e)=> InputBadgeNumber = e.Value?.ToString() ?? "")" placeholder="Enter or scan your badge number" />
        </div>
    </div>
}
else if (State == LoginState.Info && player != null)
{
    <div class="container">

        <div class="card row mb-3" id="pointsCard">
            <div class="card-header">
                <h3 class="text-center my-1">Profile</h3>
            </div>
            <div class="card-body">
                    <dl class="row mx-3">
                        <dd class="col-3">Username</dd>
                        <dt class="col-9">@player.BadgeNumber</dt>
                        <dd class="col-3">Display Name</dd>
                        <dt class="col-9">@user?.DisplayName</dt>
                    </dl>
                <div class="row mx-3">
                    <a class="btn btn-primary col-auto" href="/Identity/Account/Manage">Edit Account</a>
                    <form class="col-auto" method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="btn btn-primary">Log out</button>
                    </form>
                </div>
            </div>
        </div>

        <div class="card row mb-3" id="pointsCard">
            <div class="card-header">
                <h3 class="text-center my-1">You have @player.PointTransactions.Sum(p => p.Value) points</h3>
            </div>
            <div class="card-body">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <td>Question</td>
                            <td>Value</td>
                            <td>Timestamp</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in player.PointTransactions.OrderByDescending(p => p.Timestamp))
                        {
                            <tr>
                                <td>@(transaction.Source == PointTransaction.PointSource.Question ? (transaction.Question?.Title ?? "") : transaction.Source)</td>
                                <td>@transaction.Value</td>
                                <td>@transaction.Timestamp</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}


@code {
    enum LoginState
    {
        Loading,
        Register,
        Info
    }
    LoginState State { get; set; }

    string? inputBadgeNumber;
    string? InputBadgeNumber { get => inputBadgeNumber; set { inputBadgeNumber = value; BadgeNumberUpdated(); } }

    Player? player;
    ScavhuntUser user;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            player = await players.GetCurrent();
            var state = await auth.GetAuthenticationStateAsync();
            user = await users.FindByNameAsync(state.User.Identity.Name);
            if (player == default)
            {
                State = LoginState.Register;
            }
            else
            {
                State = LoginState.Info;
            }


            StateHasChanged();
        }
    }

    void BadgeNumberUpdated()
    {
        if (Player.BadgeFormat.IsMatch(InputBadgeNumber ?? ""))
        {
            Task.Run(async () => await CreateOrSetPlayer(InputBadgeNumber));
        }
    }

    async Task CreateOrSetPlayer(string? badgeNumber)
    {
        if (string.IsNullOrWhiteSpace(badgeNumber) || !Player.BadgeFormat.IsMatch(badgeNumber ?? ""))
        {
            return;
        }

        await InvokeAsync(() => { State = LoginState.Loading; StateHasChanged(); });

        var p = await players.CreateOrExisting(badgeNumber);

        if (p != default)
        {
            await js.SetStorage("badgeNumber", p.BadgeNumber);
            nav.NavigateTo("/", true);
        }
        else
        {
            State = LoginState.Register;
        }
    }

    async Task PlayerEditSubmit()
    {

    }

}