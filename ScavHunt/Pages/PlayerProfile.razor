@page "/player"
@attribute [Authorize]
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Identity;
@using ScavHunt.Data.Models
@inject PlayerService players
@inject JSInterop js;
@inject NavigationManager nav;
@inject SignInManager<ScavhuntUser> SignInManager;
@inject AuthenticationStateProvider auth;
@inject UserManager<ScavhuntUser> users;

@if (State == LoginState.Loading)
{
    <div class="container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (State == LoginState.Info && player != null)
{
    <div class="container">
        <div class="card row mb-3" id="pointsCard">
            <div class="card-header">
                <h3 class="text-center my-1">Profile</h3>
            </div>
            <div class="card-body">
                <div class="row ms-3">
                    <dl class="col-xl-6 row align-content-start">
                        <dd class="col-4">Username</dd>
                        <dt class="col-8">@user.UserName</dt>
                        <dd class="col-4">Display Name</dd>
                        <dt class="col-8">@user?.DisplayName</dt>
                    </dl>
                    <div class="col-xl-6 p-3" id="player-qr-code">
                    </div>
                </div>
                <div class="row ms-3 justify-content-evenly">
                    <a class="btn btn-primary col-auto" href="/Identity/Account/Manage">Edit Account</a>
                    <form class="col-auto" method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="btn btn-primary">Log out</button>
                    </form>
                </div>
            </div>
        </div>

        @if (player.PointTransactions.Count > 0)
        {
            <div class="card row mb-3" id="pointsCard">
                <div class="card-header">
                    <h3 class="text-center my-1">You have @player.PointTransactions.Sum(p => p.Value) points</h3>
                </div>
                <div class="card-body">
                    <table class="table table-striped table-hover" style="table-layout: fixed;">
                        <thead>
                            <tr>
                                <td>Question</td>
                                <td class="text-center">Value</td>
                                <td class="text-center">Duration</td>
                                <td class="text-end">Timestamp</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in player.PointTransactions.OrderByDescending(p => p.Timestamp))
                            {
                                <tr>
                                    <td>
                                        @(
                                            transaction.Source == PointTransaction.PointSource.Question ? (transaction.Question?.Title ?? "") : transaction.Source
                                            )
                                    </td>
                                    <td class="text-center">@transaction.Value</td>
                                    <td class="text-center">@transaction.Duration.ToString("N2")</td>
                                    <td class="text-end">@transaction.Timestamp</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}


@code {
    enum LoginState
    {
        Loading,
        Info
    }
    LoginState State { get; set; }

    Player? player;
    ScavhuntUser user;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            player = await players.GetCurrent();
            var state = await auth.GetAuthenticationStateAsync();
            user = await users.FindByNameAsync(state.User.Identity.Name);
            State = LoginState.Info;
            StateHasChanged();
        }
        else
        {
            await js.CreateQrCode("player-qr-code", user.Id);
        }
    }
}