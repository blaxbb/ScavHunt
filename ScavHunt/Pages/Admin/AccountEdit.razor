@page "/admin/accounts/{id}"
@attribute [Authorize(Roles = "admin")]
@using Microsoft.AspNetCore.Identity;
@using ScavHunt.Data.Models;
@using ScavHunt.Services;
@inject UserManager<ScavhuntUser> userManager;
@inject UserService users;
@inject NavigationManager navManager;

<div class="container">
    @if (User != null)
    {
        <h3>AccountEdit</h3>
        <form @onsubmit="(async() => await saveAccount())">
            <input class="form-control mb-3" readonly @bind-value="User.Email" />
            <div class="mb-3">
                <label class="form-label">Display Name</label>
                <input class="form-control mb-3" @bind-value="User.DisplayName" />
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" @bind="IsAdmin" id="adminCheckbox">
                <label class="form-check-label" for="adminCheckbox">
                    Is Administrator
                </label>
            </div>
@*            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" @bind="Is" id="lockCheckbox">
                <label class="form-check-label" for="lockCheckbox">
                    Is Locked
                </label>
            </div>*@
            <button class="btn btn-primary" type="submit">Save</button>
        </form>
    }
</div>

@code {
    [Parameter]
    public string id { get; set; }

    ScavhuntUser User;
    bool IsAdmin { get; set; }

    IList<string> roles;

    protected override async Task OnInitializedAsync()
    {
        User = await userManager.FindByIdAsync(id);
        roles = users.GetRolesById(id).ToList();
        if (roles.Contains("admin"))
        {
            IsAdmin = true;
        }

        await base.OnInitializedAsync();
    }

    async Task saveAccount()
    {
        if (IsAdmin && !roles.Contains("admin"))
        {
            users.AddToRole(User, "admin");
        }

        if (!IsAdmin && roles.Contains("admin"))
        {
            users.RemoveFromRole(User, "admin");
        }

        await users.Update(User);

        navManager.NavigateTo("/admin/accounts");
    }

}
