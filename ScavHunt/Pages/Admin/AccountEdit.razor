@page "/admin/accounts/{id}"
@attribute [Authorize(Roles = "admin")]
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Options;
@using ScavHunt.Data.Models;
@using ScavHunt.Services;
@using System.Text.RegularExpressions;
@inject UserManager<ScavhuntUser> userManager;
@inject UserService users;
@inject PlayerAdminService players;
@inject NavigationManager navManager;
@inject IOptions<BadgeOptions> badgeOptions;

<ScannerModal Id="scannerModal" Title="Scan Badge" Success="ScanSuccess" @ref=scanner />

<div class="container">
    @if (User != null)
    {
        <h3>AccountEdit</h3>
        <form @onsubmit="(async() => await saveAccount())">
            <input class="form-control mb-3" readonly @bind-value="User.Email" />
            <div class="mb-3">
                <label class="form-label">Display Name</label>
                <input class="form-control mb-3" @bind-value="User.DisplayName" />
            </div>
            <div class="mb-3">
                <label class="form-label">Badge</label>
                <div class="row">
                    <div class="col-auto">
                        <button type="button" class="btn btn-interactable"><span class="oi oi-camera-slr" @onclick=ShowBadgeScanner></span></button>
                    </div>
                    <div class="col">
                        <input class="form-control mb-3" @bind-value="User.BadgeId" />
                    </div>
                </div>
                @if (SameBadgeUser != null)
                {
                    <div class="row">
                        <div class="alert alert-danger">
                            This badge is assigned to another player. <a href="/admin/accounts/@SameBadgeUser.Id">@SameBadgeUser?.DisplayName</a>
                        </div>
                    </div>
                }
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" @bind="User.EmailConfirmed" id="emailConfirmedCheckbox">
                <label class="form-check-label" for="emailConfirmedCheckbox">
                    Email Confirmed
                </label>
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" @bind="IsAdmin" id="adminCheckbox">
                <label class="form-check-label" for="adminCheckbox">
                    Is Administrator
                </label>
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" @bind="IsPrizeAdmin" id="prizeCheckbox">
                <label class="form-check-label" for="prizeCheckbox">
                    Is Prize Admin
                </label>
            </div>
            <button class="btn btn-primary" type="submit">Save</button>
        </form>
    }
</div>

@code {
    [Parameter]
    public string id { get; set; }

    ScavhuntUser User;
    bool IsAdmin { get; set; }
    bool IsPrizeAdmin { get; set; }

    ScannerModal? scanner { get; set; }

    IList<string> roles;

    bool accountCurrentlyEmailConfirmed;

    ScavhuntUser SameBadgeUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        users.ClearTracking();
        User = await userManager.FindByIdAsync(id);
        accountCurrentlyEmailConfirmed = User.EmailConfirmed;
        roles = users.GetRolesById(id).ToList();

        IsAdmin = false;
        IsPrizeAdmin = false;
        SameBadgeUser = null;

        if (roles.Contains("admin"))
        {
            IsAdmin = true;
        }
        if (roles.Contains("prize"))
        {
            IsPrizeAdmin = true;
        }
    }

    async Task saveAccount()
    {
        if(await IsDuplicateBadge(User?.BadgeId))
        {
            StateHasChanged();
            return;
        }

        if (IsAdmin && !roles.Contains("admin"))
        {
            users.AddToRole(User, "admin");
        }

        if (!IsAdmin && roles.Contains("admin"))
        {
            users.RemoveFromRole(User, "admin");
        }

        if(IsPrizeAdmin && !roles.Contains("prize"))
        {
            users.AddToRole(User, "prize");
        }
        if(!IsPrizeAdmin && roles.Contains("prize"))
        {
            users.RemoveFromRole(User, "prize");
        }

        await users.Update(User);
        await RefreshToken(User);

        if(!User.EmailConfirmed && accountCurrentlyEmailConfirmed)
        {
            await userManager.GenerateEmailConfirmationTokenAsync(User);
        }

        navManager.NavigateTo("/admin/players");
    }

    async Task RefreshToken(ScavhuntUser user)
    {
        await userManager.UpdateSecurityStampAsync(user);
    }

    async Task ShowBadgeScanner()
    {
        await scanner.Show();
    }

    async Task ScanSuccess(string text)
    {
        var match = Regex.Match(text, badgeOptions.Value.Regex);
        if (match.Success)
        {
            User.BadgeId = text;
            await IsDuplicateBadge(text);
            await scanner?.Hide();
        }
    }

    async Task<bool> IsDuplicateBadge(string badge)
    {
        var existingBadge = await players.GetFromBadge(badge);
        if (existingBadge != null && existingBadge?.User.Id != User.Id)
        {
            SameBadgeUser = existingBadge.User;
            return true;
        }

        return false;
    }

}
