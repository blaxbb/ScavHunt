@page "/admin/players/{username}"
@attribute [Authorize(Roles = "admin")]

@using ScavHunt.Components.Admin
@using ScavHunt.Data.Models
@inject PlayerAdminService players
@inject PointAdminService points
@inject NavigationManager nav
@inject JSInterop js
@inject AuthenticationStateProvider auth
@inject LogAdminService log
@inject PrizeAdminService prizeService


@if (player == default)
{
    <div class="container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <AddPrizeModal @ref=prizeModal User=@player?.User Badge=@player?.User?.BadgeId Saved="UpdatePrizes" />

    <Modal Id="addPoints" Title="Add Points" Confirmed="SubmitManualPoints" ConfirmText="Submit">
        <form class="px-3">
            <div class="mb-3 row">
                <label class="col-form-label col-sm-3">Points</label>
                <input class="form-control col-sm-9" type="number" step="1" @bind-value="manualPoints" />
            </div>
            <div class="mb-3 row">
                <label class="col-form-label col-sm-3">Duration</label>
                <input class="form-control col-sm-9" type="number" step="1" @bind-value="manualPointsDuration" />
            </div>
            <div class="mb-3 row">
                <label class="col-form-label col-sm-3">Message</label>
                <input class="form-control col-sm-9" @bind-value="manualPointsMessage" />
            </div>
        </form>
    </Modal>

    <Modal Id="logMessage" Title="Log Message" ConfirmText="Submit" Confirmed="SubmitMessage">
        <form class="px-3">
            <div class="mb-3 row">
                <label class="col-form-label col-sm-3">Message</label>
                <input class="form-control col-sm-9" @bind-value="logMessage" />
            </div>
        </form>
    </Modal>

    <Modal Id="resetQuestion" Title="Reset Question" ConfirmText="Submit" Confirmed="ConfirmResetQuestion">
        <form class="px-3">
            <div class="mb-3 row">
                This will reset progress on question @resetQuestion?.ShortCode for player with username @player.User.UserName.
            </div>
            <div class="mb-3 row">
                This should not be done unless deemed necessary due to game malfunction.
            </div>
            <div class="mb-3 row">
                <label class="col-form-label col-sm-3">Message</label>
                <input class="form-input col-sm-9" @bind-value="resetMessage" />
            </div>
        </form>
    </Modal>

    <div class="container">
        <div class="row card mb-3">
            <div class="card-header row m-0">
                <div class="col">
                    <h3 class="text-center my-1">Info</h3>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-outline-primary" @onclick="@(async () => nav.NavigateTo($"/admin/accounts/{player.User.Id}"))"><span class="oi oi-pencil"></span></button>
                </div>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-lg-3">Name</dt>
                    <dd class="col-lg-9">@player.User.DisplayName</dd>
                    <dt class="col-lg-3">Badge</dt>
                    <dd class="col-lg-9">@player.User.BadgeId</dd>
                    <dt class="col-lg-3">Points</dt>
                    <dd class="col-lg-9">@player.PointTransactions.Sum(p => p.Value)</dd>
                </dl>
            </div>
        </div>
        <div class="row card mb-3">
            <div class="card-header row m-0">
                <div class="col">
                    <h3 class="text-center my-1">Prizes</h3>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-outline-primary" @onclick="@(async () => await prizeModal!.Show())">+</button>
                </div>
            </div>
            <div class="card-body">
                @if (prizes != null)
                {
                    <Pagination ItemsPerPage="ItemsPerPage" Page="PrizePage" TotalItems="prizes.Count" PageChanged="p => PrizePage = p" />
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <td>Type</td>
                                    <td>Time</td>
                                    <td>Name</td>
                                    <td class="text-end">Granted By</td>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var transaction in prizes.Skip(ItemsPerPage * PrizePage).Take(ItemsPerPage))
                                {
                                    <tr>
                                        <td>@transaction.Prize.Type</td>
                                        <td>@transaction.Timestamp</td>
                                        <td>@transaction.Prize.Name</td>
                                        <td class="text-end">@transaction.CreatedBy.UserName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
        <div class="row card mb-3">
            <div class="card-header row m-0">
                <div class="col">
                    <h3 class="text-center my-1">Points</h3>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-outline-primary" @onclick="@(async () => await js.ShowModal("addPoints"))">+</button>
                </div>
            </div>
            <div class="card-body">
                <Pagination ItemsPerPage="ItemsPerPage" Page="PointsPage" TotalItems="player.PointTransactions.Count" PageChanged="p => PointsPage = p" />
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <td>Source</td>
                                <td>Question</td>
                                <td>Value</td>
                                <td>Duration</td>
                                <td class="text-end">Timestamp</td>
                                <td class="text-end"></td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in player.PointTransactions.OrderByDescending(p => p.Timestamp).Skip(ItemsPerPage * PointsPage).Take(ItemsPerPage))
                            {
                                <tr>
                                    <td>@transaction.Source</td>
                                    <td>@(transaction.Question?.ShortCode ?? "")</td>
                                    <td>@transaction.Value</td>
                                    <td>@transaction.Duration.ToString("N2")</td>
                                    <td class="text-end">@transaction.Timestamp</td>
                                    <td class="text-end">
                                        @if (transaction.Source == PointTransaction.PointSource.Question && transaction.Question != default)
                                        {
                                            <button type="button" class="btn btn-primary" @onclick="(async () => await ResetQuestion(transaction.Question))"><span class="oi oi-trash"></span></button>
                                        }
                                        else
                                        {

                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row card mb-3">
            <div class="card-header row m-0">
                <div class="col">
                    <h3 class="text-center my-1">Logs</h3>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-outline-primary" @onclick="@(async () => await js.ShowModal("logMessage"))">+</button>
                </div>
            </div>
            <div class="card-body">
                @if (Responses != null)
                {
                    <Pagination ItemsPerPage="ItemsPerPage" Page="LogPage" TotalItems="Responses.Count" PageChanged="p => LogPage = p" />
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <td>Type</td>
                                    <td>Message</td>
                                    <td>Question</td>
                                    <td>Timestamp</td>
                                    <td></td>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in Responses.OrderByDescending(l => l.Timestamp).Skip(LogPage * ItemsPerPage).Take(ItemsPerPage))
                                {
                                    <tr>
                                        <td>@log.Type</td>
                                        <td>@log.Message</td>
                                        <td>@log.Question?.Title</td>
                                        <td>@log.Timestamp</td>
                                        @if (log.Type == LogRecord.RecordType.StartedQuestion && log.Question != default)
                                        {
                                            <td>
                                                <button type="button" class="btn btn-primary" @onclick="(async () => await ResetQuestion(log.Question))"><span class="oi oi-trash"></span></button>
                                            </td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    Player? player { get; set; }

    [Parameter]
    public string? username { get; set; }

    string? manualPoints { get; set; } = "0";
    string? manualPointsDuration { get; set; } = "0";
    string? manualPointsMessage { get; set; }

    string? logMessage { get; set; }

    Question? resetQuestion { get; set; }
    string? resetMessage { get; set; }

    const int ItemsPerPage = 25;

    int LogPage { get; set; }
    int PointsPage { get; set; }
    int PrizePage { get; set; }

    AddPrizeModal? prizeModal { get; set; }
    List<PrizeTransaction>? prizes { get; set; }
    List<LogRecord> Responses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            nav.NavigateTo("404");
            return;
        }

        player = await players.GetFromUsernameWithPointTransactions(username);


        if (player == default)
        {
            nav.NavigateTo("404");
            return;
        }

        Responses = await players.GetResponses(player.User.Id);

        await UpdatePrizes();
    }

    async Task SubmitManualPoints()
    {
        int p = 0;
        int duration = 0;

        if (!int.TryParse(manualPoints, out p))
        {
            return;
        }

        if(!int.TryParse(manualPointsDuration, out duration))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(manualPointsMessage))
        {
            return;
        }

        if (player == default)
        {
            return;
        }

        var account = await auth.GetAuthenticationStateAsync();
        var adminName = account?.User?.Identity?.Name;
        if (adminName == default)
        {
            return;
        }

        await points.AddPoints(new PointTransaction()
            {
                Player = player,
                Source = PointTransaction.PointSource.Manual,
                Timestamp = DateTime.Now,
                Value = p,
                Duration = duration
            });

        await log.Create(
        new LogRecord()
            {
                User = player.User,
                Message = $"{adminName} -> {manualPointsMessage}",
                Timestamp = DateTime.Now,
                Type = LogRecord.RecordType.PointTransaction
            });

        manualPoints = "";
        manualPointsDuration = "";
        manualPointsMessage = "";

        player = await players.GetFromUsernameWithPointTransactions(username);
        Responses = await players.GetResponses(player.User.Id);

        await js.HideModal("addPoints");
    }

    async Task SubmitMessage()
    {
        if (string.IsNullOrWhiteSpace(logMessage))
        {
            return;
        }

        await log.Create(new LogRecord()
            {
                Type = LogRecord.RecordType.Player,
                Message = logMessage,
                User = player?.User,
                Timestamp = DateTime.Now
            });

        logMessage = default;

        Responses = await players.GetResponses(player.User.Id);

        await js.HideModal("logMessage");
    }

    async Task ResetQuestion(Question question)
    {
        if (player == default || question == default)
        {
            return;
        }
        resetQuestion = question;
        await js.ShowModal("resetQuestion");
    }

    async Task ConfirmResetQuestion()
    {
        if (string.IsNullOrWhiteSpace(resetMessage))
        {
            return;
        }

        if (resetQuestion == default || player == default)
        {
            return;
        }

        if (await points.Reset(player, resetQuestion, resetMessage))
        {
            resetQuestion = default;
            player = await players.GetFromUsernameWithPointTransactions(username);
            Responses = await players.GetResponses(player.User.Id);
            StateHasChanged();
            await js.HideModal("resetQuestion");
        }
    }

    async Task UpdatePrizes()
    {
        prizes = await prizeService.AllTransactions(player.User);
        prizes = prizes.OrderByDescending(p => p.Timestamp).ToList();
    }
}