@page "/admin/players"
@using ScavHunt.Data.Models
@inject PlayerAdminService players;
@attribute [Authorize(Roles = "admin")]

<div class="container">
    <h3>Players</h3>
    @if(All != null)
    {
        <Pagination ItemsPerPage="PlayersPerPage" Page="Page" TotalItems="All.Count" PageChanged="p => Page = p"/>
    }
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <td>Email Confirmed</td>
                <td class="cursor-pointer" @onclick="@(() => SetSort(SortMode.Name))">Username @GetDirectionIndicator(SortMode.Name)</td>
                <td class="cursor-pointer" @onclick="@(() => SetSort(SortMode.Created))">Created @GetDirectionIndicator(SortMode.Created)</td>
                <td class="cursor-pointer" @onclick="@(() => SetSort(SortMode.Points))">Points @GetDirectionIndicator(SortMode.Points)</td>
                <td></td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @if (All != null)
            {
                @foreach (var player in (
                    Direction == SortDirection.Ascending ?
                        All.OrderBy(p => PlayerSort(p)) : All.OrderByDescending(p => PlayerSort(p))
                    ).Skip(PlayersPerPage * Page).Take(PlayersPerPage))
                {
                    <tr>
                        <td>@(player.User.EmailConfirmed ? "✔️" : "❌")</td>
                        <td>@player.User.UserName</td>
                        <td>@player.Created</td>
                        <td>@player.PointTransactions.Sum(p => p.Value)</td>
                        <td><NavLink class="btn btn-primary" href=@($"/admin/players/{player.User.UserName}")>Details</NavLink></td>
                        <td><NavLink class="btn btn-primary" href=@($"admin/accounts/{player.User.Id}")>Edit</NavLink></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {

    List<Player> All { get; set; }

    SortMode Mode { get; set; }
    SortDirection Direction { get; set; }

    int Page { get; set; }
    const int PlayersPerPage = 100;

    enum SortMode
    {
        Name,
        Created,
        Points
    };

    enum SortDirection
    {
        Ascending,
        Descending
    };

    protected override void OnInitialized()
    {
        All = players.AllPlayers();
    }

    string GetDirectionIndicator(SortMode mode)
    {
        //this should be done in css
        if(mode == Mode)
        {
            return Direction == SortDirection.Ascending ? "▲" : "▼";
        }

        return " ";
    }

    void SetSort(SortMode mode)
    {
        if(Mode == mode)
        {
            Direction = Direction == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
        }
        else
        {
            Mode = mode;
            Direction = SortDirection.Descending;
        }
    }

    object PlayerSort(Player p)
    {
        return Mode switch
        {
            SortMode.Name => p.User.DisplayName,
            SortMode.Created => p.Created,
            SortMode.Points => p.PointTransactions.Sum(p => p.Value),
            _ => ""
        };
    }
}
