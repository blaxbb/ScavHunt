@page "/admin/alerts"
@attribute [Authorize(Roles = "admin")]
@using ScavHunt.Data.Models
@using ScavHunt.Services;
@inject AlertAdminService alerts
@inject JSInterop js
@inject EmailSender emailSender
@inject UserService users
@inject LeaderboardService leaderboard;

<Modal Id="@EDIT_ID" Title="@(editAlert?.Id != 0 ? $"Editing {editAlert?.Title}" : "New Alert")" ConfirmText="Save" Confirmed="SaveAlert">
    @if (editAlert != null)
    {
        <EditForm id="editAlertForm" Model="@editAlert">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText class="form-control" id="title" @bind-Value="editAlert.Title" placeholder="Title" />
            </div>

            <div class="mb-3">
                <MarkdownEditor @bind-MarkdownText="editAlert.Message" Title="Message" Placeholder="Message" />
            </div>
            <div class="mb-3">
                <label class="form-label">Type</label>
                <InputSelect class="form-select" @bind-Value="editAlert.Type">
                    @foreach (var type in Enum.GetValues<Alert.AlertType>())
                    {
                        <option>@type</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Unlock Time</label>
                <input type="datetime-local" class="form-control" @bind="editAlert.StartTime" step="1" />
            </div>

            <div class="mb-3">
                <label class="form-label">Lock Time</label>
                <input type="datetime-local" class="form-control" @bind="editAlert.EndTime" step="1" />
            </div>
        </EditForm>
    }
</Modal>

<Modal Id="@EMAIL_ID" Title="Send Mass Email" Confirmed="SendEmail" ConfirmText="Send">
    @if (emailData != null)
    {
        <EditForm id="sendEmailForm" Model="@emailData">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Subject</label>
                <InputText class="form-control" id="subject" @bind-Value="emailData.Subject" placeholder="Subject" />
            </div>

            <div class="mb-3">
                <label class="form-label">Content</label>
                <InputTextArea class="form-control" id="text" rows="6" @bind-Value="emailData.Content" placeholder="Content" />
            </div>
            <div class="mb-3">
                @if (leaders != null && emailData.IsLeaderEmail)
                {
                    @foreach (var leader in leaders.Skip(LeadersPerPage * LeaderPage).Take(LeadersPerPage))
                    {
                        var email = leader.User.Email;

                        <div class="row py-1 border-bottom mx-3">
                            <div class="col-auto">
                                <input type="checkbox" class="form-check" style="min-width:25px; height: 100%" @onchange=@(() => ToggleLeaderEmail(email))>
                            </div>
                            <div class="col">
                                <div>
                                    @leader.User.DisplayName
                                </div>
                                <div>
                                    @leader.User.UserName
                                </div>
                            </div>
                            <div class="col">
                            </div>
                            <div class="col">
                                @leaderboard.PointString(leaders, leader)
                            </div>
                        </div>
                    }
                    <div class="row mt-3">
                        <Pagination ItemsPerPage="LeadersPerPage" Page="LeaderPage" TotalItems="leaders.Count" PageChanged="(p) => LeaderPage = p" />
                    </div>
                }
            </div>
        </EditForm>
    }
</Modal>

<div class="container">
    <div class="row">
        <div class="col-sm">
            <h3>Alerts</h3>
        </div>
        <div class="col-12 col-sm-auto mb-1">
            <button type="button" class="w-100 btn btn-interactable btn-primary" @onclick="NewAlert">New Banner</button>
        </div>
        <div class="col-12 col-sm-auto mb-1">
            <button type="button" class="w-100 btn btn-interactable btn-primary" @onclick="ShowLeaderEmailModal">Send Leader Email</button>
        </div>
        <div class="col-12 col-sm-auto mb-1">
            <button type="button" class="w-100 btn btn-interactable btn-primary" @onclick="ShowEmailModal">Send Email</button>
        </div>
    </div>

    @if (Active != default)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <td></td>
                    <td>Title</td>
                    <td>Type</td>
                    <td>Start Time</td>
                    <td>End Time</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var alert in Active)
                {
                    <tr class="align-middle">
                        @if (alert.IsActive())
                        {
                            <td><span class="oi oi-check"></span></td>
                        }
                        else
                        {
                            <td><span class="oi oi-ban"></span></td>
                        }
                        <td>@alert.Title</td>
                        <td>@alert.Type</td>
                        <td>@alert.StartTime</td>
                        <td>@alert.EndTime</td>
                        <td><button type="button" class="btn btn-primary" @onclick="(async () => await EditAlert(alert))">Edit</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <Spinner />
    }
</div>

@code {
    const string EDIT_ID = "EditAlertModal";
    const string EMAIL_ID = "SendEmailId";

    List<Alert>? Active { get; set; }

    Alert? editAlert;

    EmailData? emailData;

    List<Player> leaders { get; set; } = new List<Player>();
    public int LeaderPage { get; set; }
    public int LeadersPerPage => 10;

    public class EmailData
    {
        public string Subject;
        public string Content;
        public bool IsLeaderEmail { get; set; } = false;
        public List<string> Receipients { get; set; } = new List<string>();
    }

    protected override async Task OnInitializedAsync()
    {
        Active = await alerts.All();
        leaders = await leaderboard.Leaderboard();
    }

    async Task NewAlert()
    {
        editAlert = new Alert()
            {
                Id = -1,
                Type = Alert.AlertType.Danger
            };

        await js.ShowModal(EDIT_ID);
    }

    async Task ShowEmailModal()
    {
        emailData = new EmailData();

        await js.ShowModal(EMAIL_ID);
    }

    async Task ShowLeaderEmailModal()
    {
        emailData = new EmailData()
        {
             IsLeaderEmail = true
        };

        await js.ShowModal(EMAIL_ID);
    }

    async Task EditAlert(Alert alert)
    {
        editAlert = new Alert()
            {
                Id = alert.Id,
                Type = alert.Type,
                Title = alert.Title,
                Message = alert.Message,
                StartTime = alert.StartTime,
                EndTime = alert.EndTime
            };

        await js.ShowModal(EDIT_ID);
    }

    async Task SaveAlert()
    {
        await js.HideModal(EDIT_ID);

        if (editAlert == null)
        {
            return;
        }

        if (editAlert.Id == -1)
        {
            editAlert.Id = 0;
            await alerts.New(editAlert);
        }
        else
        {
            await alerts.Update(editAlert);
        }

        Active = await alerts.All();
    }

    async Task SendEmail()
    {
        if (string.IsNullOrWhiteSpace(emailData?.Subject))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(emailData?.Content))
        {
            return;
        }

        await js.HideModal(EMAIL_ID);

        List<string> emails;
        if (emailData.IsLeaderEmail)
        {
            emails = emailData.Receipients;
        }
        else
        {
            emails = users.Users.Where(u => u.EmailConfirmed).Select(u => u.Email).ToList();
        }


        await emailSender.SendEmailAsync(emails, emailData.Subject, emailData.Content.Replace("\n", "<br />"));
    }

    void ToggleLeaderEmail(string email)
    {
        if(emailData?.Receipients != null)
        {
            if (emailData.Receipients.Contains(email))
            {
                emailData.Receipients.Remove(email);
            }
            else
            {
                emailData.Receipients.Add(email);
            }
        }
    }
}
