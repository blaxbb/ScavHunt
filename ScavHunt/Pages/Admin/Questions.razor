@page "/admin/questions"
@using ScavHunt.Components.Admin
@using ScavHunt.Data.Models
@attribute [Authorize]
@inject QuestionAdminService questions
@inject JSInterop js

<Modal id="@EditId" Title="@(editQuestion?.ShortCode != default ? $"Editing - {editQuestion.ShortCode}" : "New question")">
    @if (editQuestion != null)
    {
        <EditForm id="editQuestionForm" Model="@editQuestion" OnValidSubmit="@SaveQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card mb-3">
                <div class="card-header">
                    <h5>Info</h5>
                </div>
                <div class="card-body">
                    <div class="form-check mb-3">
                        <label class="form-label">Title</label>
                        <InputText class="form-control" id="title" @bind-Value="editQuestion.Title" placeholder="Title" />
                    </div>

                    <div class="form-check mb-3">
                        <label class="form-label">Vendor</label>
                        <InputText class="form-control" id="vendor" @bind-Value="editQuestion.Vendor" placeholder="Vendor" />
                    </div>

                    <div class="form-check mb-3">
                        <label class="form-label">Question - Markdown enabled</label>
                        <InputTextArea class="form-control" id="text" rows="6" @bind-Value="editQuestion.Text" placeholder="Question" />
                    </div>

                    <div class="form-check mb-3">
                        <label class="form-label">Hint - Markdown enabled</label>
                        <InputTextArea class="form-control" id="hint" rows="6" @bind-Value="editQuestion.HintText" placeholder="Hint" />
                    </div>

                    <div class="form-check mb-3">
                        <label class="form-label">Success - Markdown enabled</label>
                        <InputTextArea class="form-control" id="successText" rows="6" @bind-Value="editQuestion.SuccessText" placeholder="Success Text" />
                    </div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h5>Answer</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-sm-auto my-auto">
                            Answers
                        </div>
                        <div class="col-sm-auto">
                            <button type="button" class="btn btn-primary" @onclick="AddAnswer">+</button>
                        </div>
                    </div>
                    <label class="form-label mb-3">Top answer is the correct one.</label>
                    <div class="form-check mb-3">
                        <InputCheckbox class="" id="shuffle" @bind-Value="editQuestion.ShuffleAnswers"/>
                        <label class="form-check-label" for="flexCheckDefault">
                            Shuffle Answers
                        </label>
                    </div>
                    @for(int i = 0; i < editQuestion.Answers.Count; i++)
                    {
                        // index required for onchange function call
                        var index = i;
                        var answer = editQuestion.Answers[i];

                        <div class="form-check mb-3">
                            <input type="text" class="form-control" placeholder="Answer" @oninput="@((e)=> UpdateAnswer(index, e.Value.ToString()))" value="@answer"/>
                        </div>
                
                    }
                </div>
            </div>
            <div class="card mb-3">
                <div class="card-header">
                    <h5>Access</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <label class="form-label">Unlock Time</label>
                        <input type="datetime-local" class="form-control" @bind="editQuestion.UnlockTime" step="1"/>
                    </div>
                    <div class="row mb-3">
                        <label class="form-label">Lock Time</label>
                        <input type="datetime-local" class="form-control" @bind="editQuestion.LockTime" step="1"/>
                    </div>
                </div>
            </div>
            <div class="card mb-3">
                <div class="card-header">
                    <h5>Parent Questions</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        If there are any questions in this section, this question will not be accessible until one of the parents has been answered correctly.
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-auto my-auto">
                            Add chained question
                        </div>
                        <div class="col-sm-auto">
                            <select class="form-select" id="parentQuestionSelect" aria-label="Add parent question" @onchange="ParentChanged">
                                <option value="-1" selected>Add parent question</option>
                                @for(int i = 0; i < All.Count; i++)
                                {
                                    if(All[i].Id == editQuestion.Id || (editQuestion?.ParentQuestion?.Id ?? -1) == All[i].Id)
                                    {
                                        continue;
                                    }
                                    <option value="@i">@($"{All[i].Title} - {All[i].ShortCode}")</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <table class="table table-striped">
                            <tbody>
                                @if (editQuestion.ParentQuestion != default)
                                {
                                    <tr>
                                        <td>@editQuestion.ParentQuestion.Title</td>
                                        <td>@editQuestion.ParentQuestion.ShortCode</td>
                                        <td><button type="button" class="btn btn-danger" @onclick="() => RemoveParent()">X</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="form-check mb-3">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
    
        </EditForm>
    }
</Modal>

<div class="container my-3">
    <div class="row">
        <div class="col-sm-auto">
            <h3>Questions</h3>
        </div>
        <div class="col-sm-auto">
            <button type="button" class="btn btn-primary" @onclick="NewQuestion">New</button>
        </div>
        <div class="col-sm-auto">
            <button type="button" class="btn btn-primary" @onclick="SaveOrder">Save Order</button>
        </div>
    </div>
    @if (Tree != null)
    {
        <QuestionIndexTreeItem Node="Tree" OnEdit="(async (q) => await EditQuestion(q))" />
    }
</div>
@code {
    const string EditId = "EditQuestionModal";

    List<Question> All { get; set; }

    Question editQuestion { get; set; }

    QuestionTreeNode Tree { get; set; }

    public record QuestionTreeNode(Question? Question, List<QuestionTreeNode>? Children = default);

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    async Task Init()
    {
        All = await questions.All();
        BuildTree();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (All != null)
        {
            await js.InitSortable("questionList");
        }
    }

    void BuildTree()
    {
        Tree = null;
        StateHasChanged();
        Tree = new QuestionTreeNode(default);
        Tree = GrowTree(Tree);
    }

    QuestionTreeNode GrowTree(QuestionTreeNode node)
    {

        if(node.Question == default)
        {
            node = node with { Children = All.Where(q => q.ParentQuestion == null).Select(q => GrowTree(new QuestionTreeNode(q))).ToList() };
        }
        else
        {
            node = node with { Children = All.Where(q => q.ParentQuestion == node.Question).Select(q => GrowTree(new QuestionTreeNode(q))).ToList() };
        }

        return node;
    }

    async Task NewQuestion()
    {
        editQuestion = new Question();
        editQuestion.Answers.Add("");
        await js.ShowModal(EditId);
    }

    async Task SaveOrder()
    {
        var result = await js.GetQuestionTree("questionList");
        foreach(var node in result)
        {
            ParseOrderNode(node);
        }

        foreach(var question in All)
        {
            await questions.Update(question);
        }

        await Init();
    }

    void ParseOrderNode(JSInterop.QuestionTree tree, Question? parent = default)
    {
        if(long.TryParse(tree.id, out long id))
        {
            var question = All.FirstOrDefault(q => q.Id == id);
            if(question == default)
            {
                return;
            }

            question.ParentQuestion = parent;

            foreach(var child in tree.children)
            {
                ParseOrderNode(child, question);
            }

        }
    }

    async Task EditQuestion(Question question)
    {
        editQuestion = new Question()
        {
            Id = question.Id,
            ShortCode = question.ShortCode,
            Vendor = question.Vendor,
            Text = question.Text,
            Answers = question.Answers.ToList(),
            Title = question.Title,
            HintText = question.HintText,
            SuccessText = question.SuccessText,
            ShuffleAnswers = question.ShuffleAnswers,
            UnlockTime = question.UnlockTime,
            LockTime = question.LockTime,
            ParentQuestion = question.ParentQuestion
        };

        await js.ShowModal(EditId);
    }

    async Task SaveQuestion()
    {
        if(editQuestion != null)
        {
            editQuestion.Answers.RemoveAll(q => string.IsNullOrWhiteSpace(q));

            if(string.IsNullOrWhiteSpace(editQuestion.ShortCode))
            {
                await questions.Add(editQuestion);
            }
            else
            {
                await questions.Update(editQuestion);
            }
        }

        editQuestion = new Question();

        await Init();
        await js.HideModal(EditId);
    }

    void UpdateAnswer(int index, string value)
    {
        if(editQuestion == null || editQuestion.Answers.Count <= index)
        {
            return;
        }

        editQuestion.Answers[index] = value;
    }

    void AddAnswer()
    {
        if(editQuestion != default)
        {
            editQuestion?.Answers.Add("");
        }
    }

    async Task ParentChanged(ChangeEventArgs e)
    {
        var selected = e.Value.ToString();
        if(editQuestion != null && int.TryParse(selected, out int index) && index >= 0)
        {
            await js.SelectValue("parentQuestionSelect", "-1");
            var question = All[index];
            editQuestion.ParentQuestion = question;
        }
    }

    void RemoveParent()
    {
        editQuestion.ParentQuestion = default;
    }
}
