@page "/admin/questions"
@using ScavHunt.Data.Models
@attribute [Authorize]
@inject QuestionAdminService questions
@inject JSInterop js

<Modal id="@EditId" Title="@(editQuestion?.ShortCode != default ? $"Editing - {editQuestion.ShortCode}" : "New question")">
    @if (editQuestion != null)
    {
        <EditForm id="editQuestionForm" Model="@editQuestion" OnValidSubmit="@SaveQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-check mb-3">
                <label class="form-label">Title</label>
                <InputText class="form-control" id="title" @bind-Value="editQuestion.Title" placeholder="Title" />
            </div>

            <div class="form-check mb-3">
                <label class="form-label">Vendor</label>
                <InputText class="form-control" id="vendor" @bind-Value="editQuestion.Vendor" placeholder="Vendor" />
            </div>

            <div class="form-check mb-3">
                <label class="form-label">Question</label>
                <InputTextArea class="form-control" id="text" rows="6" @bind-Value="editQuestion.Text" placeholder="Question" />
            </div>

            <div class="form-check mb-3">
                <label class="form-label">Hint</label>
                <InputTextArea class="form-control" id="hint" rows="6" @bind-Value="editQuestion.HintText" placeholder="Hint" />
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-sm-auto my-auto">
                            Answers
                        </div>
                        <div class="col-sm-auto">
                            <button type="button" class="btn btn-primary" @onclick="AddAnswer">+</button>
                        </div>
                    </div>
                    <label class="form-label mb-3">Top answer is the correct one.</label>
                    <div class="form-check mb-3">
                        <InputCheckbox class="" id="shuffle" @bind-Value="editQuestion.ShuffleAnswers"/>
                        <label class="form-check-label" for="flexCheckDefault">
                            Shuffle Answers
                        </label>
                    </div>
                    @for(int i = 0; i < editQuestion.Answers.Count; i++)
                    {
                        // index required for onchange function call
                        var index = i;
                        var answer = editQuestion.Answers[i];

                        <div class="form-check mb-3">
                            <input type="text" class="form-control" placeholder="Answer" @oninput="@((e)=> UpdateAnswer(index, e.Value.ToString()))" value="@answer"/>
                        </div>
                
                    }
                </div>
            </div>
            <div class="form-check mb-3">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
    
        </EditForm>
    }
</Modal>

<div class="container pt-3">
    <div class="row">
        <div class="col-sm-auto">
            <h3>Questions</h3>
        </div>
        <div class="col-sm-auto">
            <button type="button" class="btn btn-primary" @onclick="NewQuestion">New</button>
        </div>
    </div>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <td>Short Code</td>
                <td>Vendor</td>
                <td>Title</td>
                <td>Answers</td>
                <td></td>
                <td></td>
            </tr>
        </thead>
        @if (All != null)
        {
            <tbody>
                @foreach(var question in All)
                {
                    <tr>
                        <td>@question.ShortCode</td>
                        <td>@question.Vendor</td>
                        <td>@question.Title</td>
                        <td>@(question.Answers?.Count ?? 0)</td>
                        <td><button type="button" class="btn btn-primary">Details</button></td>
                        <td><button type="button" class="btn btn-primary" @onclick="(() => EditQuestion(question))">Edit</button></td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>
@code {
    const string EditId = "EditQuestionModal";

    List<Question> All { get; set; }

    Question editQuestion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        All = await questions.All();
    }

    async Task NewQuestion()
    {
        editQuestion = new Question();
        editQuestion.Answers.Add("");
        await js.ShowModal(EditId);
    }

    async Task EditQuestion(Question question)
    {
        editQuestion = new Question()
        {
            Id = question.Id,
            ShortCode = question.ShortCode,
            Vendor = question.Vendor,
            Text = question.Text,
            Answers = question.Answers.ToList(),
            Title = question.Title,
            HintText = question.HintText,
            ShuffleAnswers = question.ShuffleAnswers
        };

        await js.ShowModal(EditId);
    }

    async Task SaveQuestion()
    {
        if(editQuestion != null)
        {
            editQuestion.Answers.RemoveAll(q => string.IsNullOrWhiteSpace(q));
            if(string.IsNullOrWhiteSpace(editQuestion.ShortCode))
            {
                await questions.Add(editQuestion);
            }
            else
            {
                await questions.Update(editQuestion);
            }
        }

        editQuestion = new Question();

        All = await questions.All();
        await js.HideModal(EditId);
    }

    void UpdateAnswer(int index, string value)
    {
        if(editQuestion == null || editQuestion.Answers.Count <= index)
        {
            return;
        }

        editQuestion.Answers[index] = value;
    }

    void AddAnswer()
    {
        if(editQuestion != default)
        {
            editQuestion?.Answers.Add("");
        }
    }
}
