@page "/admin/prizes"
@using ScavHunt.Data.Models;
@attribute [Authorize(Roles = "admin")]
@inject PrizeAdminService prizeService
@inject JSInterop js

<Modal Id="@EDIT_ID" Title="@(editPrize?.Id > 0 ? $"Editing {editPrize?.Name}" : "New Prize")">
    @if (editPrize != null)
    {
        <EditForm id="editPrizeForm" Model="@editPrize" OnValidSubmit="@SavePrize">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText class="form-control" id="name" @bind-Value="editPrize.Name" placeholder="Name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Type</label>
                <InputSelect class="form-select" @bind-Value="editPrize.Type">
                    @foreach (var type in Enum.GetValues<Prize.PrizeType>())
                    {
                        <option>@type</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Quantity</label>
                <InputNumber class="form-control" id="quantity" @bind-Value="editPrize.Quantity" placeholder="Quantity"/>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    }
</Modal>

<div class="container">
    <div class="row">
        <div class="col-sm">
            <h3>Prizes</h3>
        </div>
        <div class="col-sm-auto">
            <button type="button" class="btn btn-interactable btn-primary" @onclick="NewPrize">Add</button>
        </div>
    </div>

    @if (All != default)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td>Quantity</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var prize in All)
                {
                    <tr class="align-middle">
                        <td>@prize.Name</td>
                        <td>@prize.Type</td>
                        <td>@prize.Quantity</td>
                        <td class="text-end">
                            <button class="btn btn-interactable">
                                <span class="oi oi-pencil" @onclick="(async () => await EditPrize(prize))"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <Spinner />
    }
</div>

@code {
    const string EDIT_ID = "EditPrizeModal";
    List<Prize> All { get; set; }
    Prize? editPrize = null;

    protected override async Task OnInitializedAsync()
    {
        All = await prizeService.All();
    }

    async Task NewPrize()
    {
        editPrize = new Prize();
        await js.ShowModal(EDIT_ID);
    }

    async Task SavePrize()
    {
        await js.HideModal(EDIT_ID);

        if(editPrize == default) {
            return;
        }

        if(editPrize.Id == -1)
        {
            editPrize.Id = 0;
            await prizeService.New(editPrize);
        }
        else
        {
            await prizeService.Update(editPrize);
        }

        All = await prizeService.All();
    }

    async Task EditPrize(Prize prize)
    {
        editPrize = new Prize()
        {
            Id = prize.Id,
            Name = prize.Name,
            Quantity = prize.Quantity,
            Type = prize.Type
        };

        await js.ShowModal(EDIT_ID);
    }
}
