@page "/admin/prizes"
@attribute [Authorize(Roles = "admin,prize")]
@using Microsoft.Extensions.Options;
@using ScavHunt.Components.Admin;
@using ScavHunt.Data.Models;
@using System.Text.RegularExpressions;
@inject PrizeAdminService prizeService
@inject PlayerAdminService playerService
@inject JSInterop js
@inject NavigationManager nav
@inject IOptions<BadgeOptions> badgeOptions

<ScannerModal Id="scannerModal" Title="Scan a badge" CloseText="Cancel" Success="OnScan" @ref=badgeModal />

<AuthorizeView Roles="admin">
    <Authorized>
        <AddPrizeModal @ref=grantModal User=@scannedUser Badge=@scannedBadge Saved="GetPrizes" />
    </Authorized>
</AuthorizeView>

<Modal Id="@EDIT_ID" Title="@(editPrize?.Id > 0 ? $"Editing {editPrize?.Name}" : "New Prize")" Confirmed="SavePrize" ConfirmText="Save">
    @if (editPrize != null)
    {
        <EditForm id="editPrizeForm" Model="@editPrize">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText class="form-control" id="name" @bind-Value="editPrize.Name" placeholder="Name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Type</label>
                <InputSelect class="form-select" @bind-Value="editPrize.Type">
                    @foreach (var type in Enum.GetValues<Prize.PrizeType>())
                    {
                        <option>@type</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Quantity</label>
                <InputNumber class="form-control" id="quantity" @bind-Value="editPrize.Quantity" placeholder="Quantity" />
            </div>
        </EditForm>
    }
</Modal>

<Modal Id="transactionModal" @ref="transactionModal" Title="Transactions" CloseText="Close" FullScreen="true">
    @if (transactionModalPrize != null)
    {
        <table class="table table-responsive table-hover table-striped">
            <thead>
                <tr>
                    <td>Recipient</td>
                    <td>Time</td>
                    <td>Given By</td>
                </tr>
            </thead>
            <tbody>
                @foreach(var prize in transactionModalPrize.Transactions)
                {
                    <tr>
                        <td>@(prize.User?.UserName ?? prize.Badge)</td>
                        <td>@prize.Timestamp.ToString("G")</td>
                        <td>@prize.CreatedBy?.UserName</td>
                    </tr>
                    
                }
            </tbody>
        </table>
        @foreach (var prize in transactionModalPrize.Transactions)
        {
            <div></div>
        }

    }
</Modal>

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Prizes</h3>
        </div>
        <AuthorizeView Roles="admin">
            <Authorized>
                <div class="col-auto">
                    <button type="button" class="btn btn-interactable btn-primary" @onclick="NewPrize">Create Prize</button>
                </div>
            </Authorized>
        </AuthorizeView>
        <div class="col-auto">
            <button type="button" class="btn btn-interactable btn-primary" @onclick="ScanBadge">Give Prize</button>
        </div>
    </div>

    @if (All != default)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Type</td>
                    <td class="text-end">Quantity</td>
                    <AuthorizeView Roles="admin">
                        <Authorized>
                            <td></td>
                        </Authorized>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var prize in All.OrderByDescending(p => p.Type).ThenBy(p => p.Name))
                {
                    <tr class="align-middle">
                        <td>@prize.Name</td>
                        <td>@prize.Type</td>
                        <td class="text-end">@prize.Quantity</td>
                        <AuthorizeView Roles="admin">
                            <Authorized>
                                <td class="text-end">
                                    <button class="btn btn-interactable" @onclick="(async () => await ShowTransactions(prize))">
                                        <span class="oi oi-eye"></span>
                                    </button>
                                    <button class="btn btn-interactable">
                                        <span class="oi oi-pencil" @onclick="(async () => await EditPrize(prize))"></span>
                                    </button>
                                </td>
                            </Authorized>
                        </AuthorizeView>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <Spinner />
    }
</div>

@code {
    const string EDIT_ID = "EditPrizeModal";
    const string GRANT_ID = "GrantPrizeModal";

    List<Prize> All { get; set; }
    Prize? editPrize = null;

    Prize? transactionModalPrize { get; set; }

    ScannerModal? badgeModal { get; set; }
    AddPrizeModal? grantModal { get; set; }
    Modal? transactionModal { get; set; }

    string? scannedBadge { get; set; }
    ScavhuntUser? scannedUser { get; set; }

    const int TRANSACTIONS_PER_PAGE = 10;
    int transactionPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetPrizes();
    }

    async Task NewPrize()
    {
        editPrize = new Prize();
        await js.ShowModal(EDIT_ID);
    }

    async Task ScanBadge()
    {
        scannedBadge = null;
        scannedUser = null;
        await badgeModal!.Show();
    }

    async Task OnScan(string text)
    {
        var match = Regex.Match(text, badgeOptions.Value.Regex);
        if (match.Success)
        {
            scannedBadge = text;
            scannedUser = await prizeService.GetFromBadge(text);
            await badgeModal!.Hide();
            await grantModal!.Show();
        }
    }

    async Task GetPrizes()
    {
        All = await prizeService.All();
    }

    async Task SavePrize()
    {
        await js.HideModal(EDIT_ID);

        if (editPrize == default)
        {
            return;
        }

        if (editPrize.Id == -1)
        {
            editPrize.Id = 0;
            await prizeService.New(editPrize);
        }
        else
        {
            await prizeService.Update(editPrize);
        }

        All = await prizeService.All();
    }

    async Task EditPrize(Prize prize)
    {
        editPrize = new Prize()
            {
                Id = prize.Id,
                Name = prize.Name,
                Quantity = prize.Quantity,
                Type = prize.Type
            };

        await js.ShowModal(EDIT_ID);
    }

    async Task ShowTransactions(Prize prize)
    {
        transactionPage = 0;
        transactionModalPrize = await prizeService.WithTransactions(prize);
        if (transactionModalPrize != null)
        {
            await transactionModal!.Show();
        }
    }
}